// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Struct0 is an auto generated low-level Go binding around an user-defined struct.
type Struct0 struct {
	Token                     common.Address
	Name                      string
	Symbol                    string
	TotalSupply               *big.Int
	VestingPeriodInDays       *big.Int
	Proposer                  common.Address
	VestingBeneficiary        common.Address
	InitialPlatformPercentage uint8
	Decimals                  uint8
	InitialPercentage         uint8
	Approved                  bool
}

// Struct1 is an auto generated low-level Go binding around an user-defined struct.
type Struct1 struct {
	Referral           common.Address
	ReferralPercentage uint8
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"event\",\"anonymous\":false,\"name\":\"LogProposalApprove\",\"inputs\":[{\"type\":\"string\",\"name\":\"name\",\"indexed\":false},{\"type\":\"address\",\"name\":\"tokenAddress\",\"indexed\":true}]},{\"type\":\"event\",\"anonymous\":false,\"name\":\"LogProposalImported\",\"inputs\":[{\"type\":\"string\",\"name\":\"name\",\"indexed\":false},{\"type\":\"string\",\"name\":\"symbol\",\"indexed\":false},{\"type\":\"address\",\"name\":\"proposer\",\"indexed\":false},{\"type\":\"bytes32\",\"name\":\"hashIndex\",\"indexed\":true}]},{\"type\":\"event\",\"anonymous\":false,\"name\":\"LogProposalReferralSubmit\",\"inputs\":[{\"type\":\"address\",\"name\":\"referral\",\"indexed\":false},{\"type\":\"uint8\",\"name\":\"referralPercentage\",\"indexed\":false},{\"type\":\"bytes32\",\"name\":\"hashIndex\",\"indexed\":true}]},{\"type\":\"event\",\"anonymous\":false,\"name\":\"LogProposalSubmit\",\"inputs\":[{\"type\":\"string\",\"name\":\"name\",\"indexed\":false},{\"type\":\"string\",\"name\":\"symbol\",\"indexed\":false},{\"type\":\"address\",\"name\":\"proposer\",\"indexed\":false},{\"type\":\"bytes32\",\"name\":\"hashIndex\",\"indexed\":true}]},{\"type\":\"event\",\"anonymous\":false,\"name\":\"OwnershipTransferred\",\"inputs\":[{\"type\":\"address\",\"name\":\"previousOwner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"newOwner\",\"indexed\":true}]},{\"type\":\"function\",\"name\":\"approveProposal\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_hashIndex\"},{\"type\":\"address\",\"name\":\"_token\"}],\"outputs\":[{\"type\":\"bool\"}]},{\"type\":\"function\",\"name\":\"creatorReferral\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[{\"type\":\"bytes32\"}],\"outputs\":[{\"type\":\"address\",\"name\":\"referral\"},{\"type\":\"uint8\",\"name\":\"referralPercentage\"}]},{\"type\":\"function\",\"name\":\"getCreatorByIndex\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_hashIndex\"}],\"outputs\":[{\"type\":\"tuple\",\"components\":[{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"string\",\"name\":\"name\"},{\"type\":\"string\",\"name\":\"symbol\"},{\"type\":\"uint256\",\"name\":\"totalSupply\"},{\"type\":\"uint256\",\"name\":\"vestingPeriodInDays\"},{\"type\":\"address\",\"name\":\"proposer\"},{\"type\":\"address\",\"name\":\"vestingBeneficiary\"},{\"type\":\"uint8\",\"name\":\"initialPlatformPercentage\"},{\"type\":\"uint8\",\"name\":\"decimals\"},{\"type\":\"uint8\",\"name\":\"initialPercentage\"},{\"type\":\"bool\",\"name\":\"approved\"}]}]},{\"type\":\"function\",\"name\":\"getCreatorByName\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"}],\"outputs\":[{\"type\":\"tuple\",\"components\":[{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"string\",\"name\":\"name\"},{\"type\":\"string\",\"name\":\"symbol\"},{\"type\":\"uint256\",\"name\":\"totalSupply\"},{\"type\":\"uint256\",\"name\":\"vestingPeriodInDays\"},{\"type\":\"address\",\"name\":\"proposer\"},{\"type\":\"address\",\"name\":\"vestingBeneficiary\"},{\"type\":\"uint8\",\"name\":\"initialPlatformPercentage\"},{\"type\":\"uint8\",\"name\":\"decimals\"},{\"type\":\"uint8\",\"name\":\"initialPercentage\"},{\"type\":\"bool\",\"name\":\"approved\"}]}]},{\"type\":\"function\",\"name\":\"getCreatorBySymbol\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[{\"type\":\"string\",\"name\":\"_symbol\"}],\"outputs\":[{\"type\":\"tuple\",\"components\":[{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"string\",\"name\":\"name\"},{\"type\":\"string\",\"name\":\"symbol\"},{\"type\":\"uint256\",\"name\":\"totalSupply\"},{\"type\":\"uint256\",\"name\":\"vestingPeriodInDays\"},{\"type\":\"address\",\"name\":\"proposer\"},{\"type\":\"address\",\"name\":\"vestingBeneficiary\"},{\"type\":\"uint8\",\"name\":\"initialPlatformPercentage\"},{\"type\":\"uint8\",\"name\":\"decimals\"},{\"type\":\"uint8\",\"name\":\"initialPercentage\"},{\"type\":\"bool\",\"name\":\"approved\"}]}]},{\"type\":\"function\",\"name\":\"getCreatorReferralByIndex\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_hashIndex\"}],\"outputs\":[{\"type\":\"tuple\",\"components\":[{\"type\":\"address\",\"name\":\"referral\"},{\"type\":\"uint8\",\"name\":\"referralPercentage\"}]}]},{\"type\":\"function\",\"name\":\"getIndexByName\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"}],\"outputs\":[{\"type\":\"bytes32\"}]},{\"type\":\"function\",\"name\":\"getIndexBySymbol\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[{\"type\":\"string\",\"name\":\"_symbol\"}],\"outputs\":[{\"type\":\"bytes32\"}]},{\"type\":\"function\",\"name\":\"importByIndex\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_hashIndex\"},{\"type\":\"address\",\"name\":\"_oldRegistry\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"initialize\",\"constant\":false,\"payable\":false,\"inputs\":[],\"outputs\":[]},{\"type\":\"function\",\"name\":\"legacyProposals\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"}],\"outputs\":[{\"type\":\"tuple\",\"components\":[{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"string\",\"name\":\"name\"},{\"type\":\"string\",\"name\":\"symbol\"},{\"type\":\"uint256\",\"name\":\"totalSupply\"},{\"type\":\"uint256\",\"name\":\"vestingPeriodInDays\"},{\"type\":\"address\",\"name\":\"proposer\"},{\"type\":\"address\",\"name\":\"vestingBeneficiary\"},{\"type\":\"uint8\",\"name\":\"initialPlatformPercentage\"},{\"type\":\"uint8\",\"name\":\"decimals\"},{\"type\":\"uint8\",\"name\":\"initialPercentage\"},{\"type\":\"bool\",\"name\":\"approved\"}]}]},{\"type\":\"function\",\"name\":\"legacyProposalsByIndex\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[{\"type\":\"bytes32\",\"name\":\"hashIndex\"}],\"outputs\":[{\"type\":\"tuple\",\"components\":[{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"string\",\"name\":\"name\"},{\"type\":\"string\",\"name\":\"symbol\"},{\"type\":\"uint256\",\"name\":\"totalSupply\"},{\"type\":\"uint256\",\"name\":\"vestingPeriodInDays\"},{\"type\":\"address\",\"name\":\"proposer\"},{\"type\":\"address\",\"name\":\"vestingBeneficiary\"},{\"type\":\"uint8\",\"name\":\"initialPlatformPercentage\"},{\"type\":\"uint8\",\"name\":\"decimals\"},{\"type\":\"uint8\",\"name\":\"initialPercentage\"},{\"type\":\"bool\",\"name\":\"approved\"}]}]},{\"type\":\"function\",\"name\":\"owner\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[],\"outputs\":[{\"type\":\"address\"}]},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"constant\":false,\"payable\":false,\"inputs\":[],\"outputs\":[]},{\"type\":\"function\",\"name\":\"rolodex\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[{\"type\":\"bytes32\"}],\"outputs\":[{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"string\",\"name\":\"name\"},{\"type\":\"string\",\"name\":\"symbol\"},{\"type\":\"uint256\",\"name\":\"totalSupply\"},{\"type\":\"uint256\",\"name\":\"vestingPeriodInDays\"},{\"type\":\"address\",\"name\":\"proposer\"},{\"type\":\"address\",\"name\":\"vestingBeneficiary\"},{\"type\":\"uint8\",\"name\":\"initialPlatformPercentage\"},{\"type\":\"uint8\",\"name\":\"decimals\"},{\"type\":\"uint8\",\"name\":\"initialPercentage\"},{\"type\":\"bool\",\"name\":\"approved\"}]},{\"type\":\"function\",\"name\":\"setLegacyRegistryAddress\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"address\",\"name\":\"_legacyRegistry\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"submitProposal\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"},{\"type\":\"string\",\"name\":\"_symbol\"},{\"type\":\"uint8\",\"name\":\"_decimals\"},{\"type\":\"uint256\",\"name\":\"_totalSupply\"},{\"type\":\"uint8\",\"name\":\"_initialPercentage\"},{\"type\":\"uint256\",\"name\":\"_vestingPeriodInDays\"},{\"type\":\"address\",\"name\":\"_vestingBeneficiary\"},{\"type\":\"address\",\"name\":\"_proposer\"},{\"type\":\"uint8\",\"name\":\"_initialPlatformPercentage\"}],\"outputs\":[{\"type\":\"bytes32\",\"name\":\"hashIndex\"}]},{\"type\":\"function\",\"name\":\"submitProposalReferral\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_hashIndex\"},{\"type\":\"address\",\"name\":\"_referral\"},{\"type\":\"uint8\",\"name\":\"_referralPercentage\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"transferOwnership\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"address\",\"name\":\"newOwner\"}],\"outputs\":[]}]",
	Bin: "0x608060405234801561001057600080fd5b50613bbc806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063c95b85f511610071578063c95b85f51461034a578063d490cb741461037a578063dd79506d146103aa578063df79a53d146103db578063f2fde38b146103f757610121565b80638da5cb5b146102805780639515d3ea1461029e578063969033a4146102ce578063b13873f0146102fe578063c0af85821461031a57610121565b80633ba09f13116100f45780633ba09f13146101d2578063469dfdc114610202578063715018a61461023c578063775e3477146102465780638129fc1c1461027657610121565b806305e1ac7b146101265780630aed66601461015657806326c5291414610186578063397a88a1146101b6575b600080fd5b610140600480360381019061013b91906130d8565b610413565b60405161014d91906138ce565b60405180910390f35b610170600480360381019061016b91906131b5565b6104b3565b60405161017d91906138e9565b60405180910390f35b6101a0600480360381019061019b919061312a565b6107d1565b6040516101ad91906137ac565b60405180910390f35b6101d060048036038101906101cb919061312a565b610cba565b005b6101ec60048036038101906101e791906131b5565b611082565b6040516101f991906138e9565b60405180910390f35b61021c600480360381019061021791906130d8565b6111d5565b6040516102339b9a999897969594939291906136ca565b60405180910390f35b6102446113f3565b005b610260600480360381019061025b91906131b5565b611563565b60405161026d91906138e9565b60405180910390f35b61027e611881565b005b610288611978565b60405161029591906136af565b60405180910390f35b6102b860048036038101906102b391906131b5565b6119a2565b6040516102c591906137c7565b60405180910390f35b6102e860048036038101906102e391906130d8565b6119ca565b6040516102f591906138e9565b60405180910390f35b61031860048036038101906103139190613166565b611cc4565b005b610334600480360381019061032f91906131b5565b611e5e565b60405161034191906137c7565b60405180910390f35b610364600480360381019061035f91906130d8565b611e86565b60405161037191906138e9565b60405180910390f35b610394600480360381019061038f91906131f6565b61201d565b6040516103a191906137c7565b60405180910390f35b6103c460048036038101906103bf91906130d8565b6123b0565b6040516103d2929190613783565b60405180910390f35b6103f560048036038101906103f091906130af565b612401565b005b610411600480360381019061040c91906130af565b6124f4565b005b61041b612b43565b606660008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff16815250509050919050565b6104bb612b76565b60006067836040516104cd9190613663565b908152602001604051809103902054905060656000828152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ec5780601f106105c1576101008083540402835291602001916105ec565b820191906000526020600020905b8154815290600101906020018083116105cf57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561068e5780601f106106635761010080835404028352916020019161068e565b820191906000526020600020905b81548152906001019060200180831161067157829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff1660ff1660ff1681526020016006820160159054906101000a900460ff1660ff1660ff1681526020016006820160169054906101000a900460ff1660ff1660ff1681526020016006820160179054906101000a900460ff161515151581525050915050919050565b60006107db6126e9565b73ffffffffffffffffffffffffffffffffffffffff166107f9611978565b73ffffffffffffffffffffffffffffffffffffffff1614610882576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600060656000858152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109925780601f1061096757610100808354040283529160200191610992565b820191906000526020600020905b81548152906001019060200180831161097557829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a345780601f10610a0957610100808354040283529160200191610a34565b820191906000526020600020905b815481529060010190602001808311610a1757829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff1660ff1660ff1681526020016006820160159054906101000a900460ff1660ff1660ff1681526020016006820160169054906101000a900460ff1660ff1660ff1681526020016006820160179054906101000a900460ff1615151515815250509050610b7e81602001516126f1565b610b8b8160400151612757565b826065600086815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016065600086815260200190815260200160002060060160176101000a81548160ff0219169083151502179055508360678260200151604051610c249190613663565b9081526020016040518091039020819055508360688260400151604051610c4b9190613663565b9081526020016040518091039020819055508273ffffffffffffffffffffffffffffffffffffffff167f19e9fff5bfdce65750e43ae23fbd302202cd96c991da16e86fdf447b87bfa3688260200151604051610ca791906137e2565b60405180910390a2600191505092915050565b610cc26126e9565b73ffffffffffffffffffffffffffffffffffffffff16610ce0611978565b73ffffffffffffffffffffffffffffffffffffffff1614610d69576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff1663969033a4856040518263ffffffff1660e01b8152600401610da991906137c7565b60006040518083038186803b158015610dc157600080fd5b505afa158015610dd5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dfe919061332d565b9050610e0d81602001516126f1565b610e1a8160400151612757565b806065600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610e91929190612c1d565b506040820151816002019080519060200190610eae929190612c1d565b50606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160060160146101000a81548160ff021916908360ff1602179055506101008201518160060160156101000a81548160ff021916908360ff1602179055506101208201518160060160166101000a81548160ff021916908360ff1602179055506101408201518160060160176101000a81548160ff02191690831515021790555090505080610140015115611034578360678260200151604051610ffa9190613663565b90815260200160405180910390208190555083606882604001516040516110219190613663565b9081526020016040518091039020819055505b837f82c68a30819d3b8f0c181d716ed3fafa8551cad68eefe911f471516e958421b3826020015183604001518460a0015160405161107493929190613804565b60405180910390a250505050565b61108a612b76565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663867954cf856040518263ffffffff1660e01b81526004016110ec91906137e2565b60206040518083038186803b15801561110457600080fd5b505afa158015611118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113c9190613101565b90503073ffffffffffffffffffffffffffffffffffffffff1663c95b85f5826040518263ffffffff1660e01b815260040161117791906137c7565b60006040518083038186803b15801561118f57600080fd5b505afa1580156111a3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111cc919061332d565b92505050919050565b60656020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112a75780601f1061127c576101008083540402835291602001916112a7565b820191906000526020600020905b81548152906001019060200180831161128a57829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113455780601f1061131a57610100808354040283529160200191611345565b820191906000526020600020905b81548152906001019060200180831161132857829003601f168201915b5050505050908060030154908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160149054906101000a900460ff16908060060160159054906101000a900460ff16908060060160169054906101000a900460ff16908060060160179054906101000a900460ff1690508b565b6113fb6126e9565b73ffffffffffffffffffffffffffffffffffffffff16611419611978565b73ffffffffffffffffffffffffffffffffffffffff16146114a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61156b612b76565b600060688360405161157d9190613663565b908152602001604051809103902054905060656000828152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561169c5780601f106116715761010080835404028352916020019161169c565b820191906000526020600020905b81548152906001019060200180831161167f57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561173e5780601f106117135761010080835404028352916020019161173e565b820191906000526020600020905b81548152906001019060200180831161172157829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff1660ff1660ff1681526020016006820160159054906101000a900460ff1660ff1660ff1681526020016006820160169054906101000a900460ff1660ff1660ff1681526020016006820160179054906101000a900460ff161515151581525050915050919050565b600060019054906101000a900460ff16806118a7575060008054906101000a900460ff16155b6118fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613b59602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561194c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6119546127bd565b80156119755760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006068826040516119b49190613663565b9081526020016040518091039020549050919050565b6119d2612b76565b60656000838152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ae05780601f10611ab557610100808354040283529160200191611ae0565b820191906000526020600020905b815481529060010190602001808311611ac357829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b825780601f10611b5757610100808354040283529160200191611b82565b820191906000526020600020905b815481529060010190602001808311611b6557829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff1660ff1660ff1681526020016006820160159054906101000a900460ff1660ff1660ff1681526020016006820160169054906101000a900460ff1660ff1660ff1681526020016006820160179054906101000a900460ff1615151515815250509050919050565b611ccc6126e9565b73ffffffffffffffffffffffffffffffffffffffff16611cea611978565b73ffffffffffffffffffffffffffffffffffffffff1614611d73576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018260ff168152506066600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff160217905550905050827f924a2d7699539105c99283e511a2a67d57aecd39d59697c4a76cb2187fddb6ce8383604051611e51929190613783565b60405180910390a2505050565b6000606782604051611e709190613663565b9081526020016040518091039020549050919050565b611e8e612b76565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663469dfdc1856040518263ffffffff1660e01b8152600401611ef091906137c7565b60006040518083038186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611f4591906132ec565b90506000604051806101600160405280836000015173ffffffffffffffffffffffffffffffffffffffff16815260200183602001518152602001836040015181526020018360800151815260200160078461010001510281526020018360a0015173ffffffffffffffffffffffffffffffffffffffff1681526020018360c0015173ffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001836060015160ff1681526020018360e0015160ff16815260200183610120015115158152509050809350505050919050565b60006120276126e9565b73ffffffffffffffffffffffffffffffffffffffff16612045611978565b73ffffffffffffffffffffffffffffffffffffffff16146120ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6120d78a6126f1565b6120e089612757565b8989846040516020016120f59392919061367a565b604051602081830303815290604052805190602001209050604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020018b81526020018a81526020018881526020018681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018360ff1681526020018960ff1681526020018760ff168152602001600015158152506065600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061221e929190612c1d565b50604082015181600201908051906020019061223b929190612c1d565b50606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160060160146101000a81548160ff021916908360ff1602179055506101008201518160060160156101000a81548160ff021916908360ff1602179055506101208201518160060160166101000a81548160ff021916908360ff1602179055506101408201518160060160176101000a81548160ff021916908315150217905550905050807fc59aae764581590a3a647db2078529d429d40d2a95b2ebdb110b5515023a23c18b8b3360405161239b93929190613849565b60405180910390a29998505050505050505050565b60666020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b6124096126e9565b73ffffffffffffffffffffffffffffffffffffffff16612427611978565b73ffffffffffffffffffffffffffffffffffffffff16146124b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6124fc6126e9565b73ffffffffffffffffffffffffffffffffffffffff1661251a611978565b73ffffffffffffffffffffffffffffffffffffffff16146125a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612629576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613b336026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000801b6067826040516127059190613663565b90815260200160405180910390205414612754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274b9061388e565b60405180910390fd5b50565b6000801b60688260405161276b9190613663565b908152602001604051809103902054146127ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b1906138ae565b60405180910390fd5b50565b600060019054906101000a900460ff16806127e3575060008054906101000a900460ff16155b612838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613b59602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612888576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6128906128bc565b6128986129ab565b80156128b95760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806128e2575060008054906101000a900460ff16155b612937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613b59602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612987576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156129a85760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806129d1575060008054906101000a900460ff16155b612a26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613b59602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612a76576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000612a806126e9565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015612b405760008060016101000a81548160ff0219169083151502179055505b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681525090565b604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001600060ff168152602001600060ff1681526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612c535760008555612c9a565b82601f10612c6c57805160ff1916838001178555612c9a565b82800160010185558215612c9a579182015b82811115612c99578251825591602001919060010190612c7e565b5b509050612ca79190612cab565b5090565b5b80821115612cc4576000816000905550600101612cac565b5090565b6000612cdb612cd68461393c565b61390b565b905082815260208101848484011115612cf357600080fd5b612cfe848285613a39565b509392505050565b6000612d19612d148461393c565b61390b565b905082815260208101848484011115612d3157600080fd5b612d3c848285613a48565b509392505050565b600081359050612d5381613abf565b92915050565b600081519050612d6881613abf565b92915050565b600081519050612d7d81613ad6565b92915050565b600081359050612d9281613aed565b92915050565b600081519050612da781613aed565b92915050565b600082601f830112612dbe57600080fd5b8135612dce848260208601612cc8565b91505092915050565b600082601f830112612de857600080fd5b8151612df8848260208601612d06565b91505092915050565b60006101408284031215612e1457600080fd5b612e1f61014061390b565b90506000612e2f84828501612d59565b600083015250602082015167ffffffffffffffff811115612e4f57600080fd5b612e5b84828501612dd7565b602083015250604082015167ffffffffffffffff811115612e7b57600080fd5b612e8784828501612dd7565b6040830152506060612e9b8482850161309a565b6060830152506080612eaf84828501613070565b60808301525060a0612ec384828501612d59565b60a08301525060c0612ed784828501612d59565b60c08301525060e0612eeb8482850161309a565b60e083015250610100612f0084828501613070565b61010083015250610120612f1684828501612d6e565b6101208301525092915050565b60006101608284031215612f3657600080fd5b612f4161016061390b565b90506000612f5184828501612d59565b600083015250602082015167ffffffffffffffff811115612f7157600080fd5b612f7d84828501612dd7565b602083015250604082015167ffffffffffffffff811115612f9d57600080fd5b612fa984828501612dd7565b6040830152506060612fbd84828501613070565b6060830152506080612fd184828501613070565b60808301525060a0612fe584828501612d59565b60a08301525060c0612ff984828501612d59565b60c08301525060e061300d8482850161309a565b60e0830152506101006130228482850161309a565b610100830152506101206130388482850161309a565b6101208301525061014061304e84828501612d6e565b6101408301525092915050565b60008135905061306a81613b04565b92915050565b60008151905061307f81613b04565b92915050565b60008135905061309481613b1b565b92915050565b6000815190506130a981613b1b565b92915050565b6000602082840312156130c157600080fd5b60006130cf84828501612d44565b91505092915050565b6000602082840312156130ea57600080fd5b60006130f884828501612d83565b91505092915050565b60006020828403121561311357600080fd5b600061312184828501612d98565b91505092915050565b6000806040838503121561313d57600080fd5b600061314b85828601612d83565b925050602061315c85828601612d44565b9150509250929050565b60008060006060848603121561317b57600080fd5b600061318986828701612d83565b935050602061319a86828701612d44565b92505060406131ab86828701613085565b9150509250925092565b6000602082840312156131c757600080fd5b600082013567ffffffffffffffff8111156131e157600080fd5b6131ed84828501612dad565b91505092915050565b60008060008060008060008060006101208a8c03121561321557600080fd5b60008a013567ffffffffffffffff81111561322f57600080fd5b61323b8c828d01612dad565b99505060208a013567ffffffffffffffff81111561325857600080fd5b6132648c828d01612dad565b98505060406132758c828d01613085565b97505060606132868c828d0161305b565b96505060806132978c828d01613085565b95505060a06132a88c828d0161305b565b94505060c06132b98c828d01612d44565b93505060e06132ca8c828d01612d44565b9250506101006132dc8c828d01613085565b9150509295985092959850929598565b6000602082840312156132fe57600080fd5b600082015167ffffffffffffffff81111561331857600080fd5b61332484828501612e01565b91505092915050565b60006020828403121561333f57600080fd5b600082015167ffffffffffffffff81111561335957600080fd5b61336584828501612f23565b91505092915050565b61337781613a03565b82525050565b613386816139a4565b82525050565b613395816139a4565b82525050565b6133ac6133a7826139a4565b613a7b565b82525050565b6133bb816139b6565b82525050565b6133ca816139b6565b82525050565b6133d9816139c2565b82525050565b60006133ea8261396c565b6133f48185613977565b9350613404818560208601613a48565b61340d81613aa1565b840191505092915050565b60006134238261396c565b61342d8185613988565b935061343d818560208601613a48565b61344681613aa1565b840191505092915050565b600061345c8261396c565b6134668185613999565b9350613476818560208601613a48565b80840191505092915050565b600061348f601383613988565b91507f4e616d6520616c726561647920657869737473000000000000000000000000006000830152602082019050919050565b60006134cf601583613988565b91507f53796d626f6c20616c72656164792065786973747300000000000000000000006000830152602082019050919050565b604082016000820151613518600085018261337d565b50602082015161352b6020850182613645565b50505050565b60006101608301600083015161354a600086018261337d565b506020830151848203602086015261356282826133df565b9150506040830151848203604086015261357c82826133df565b91505060608301516135916060860182613627565b5060808301516135a46080860182613627565b5060a08301516135b760a086018261337d565b5060c08301516135ca60c086018261337d565b5060e08301516135dd60e0860182613645565b506101008301516135f2610100860182613645565b50610120830151613607610120860182613645565b5061014083015161361c6101408601826133b2565b508091505092915050565b613630816139ec565b82525050565b61363f816139ec565b82525050565b61364e816139f6565b82525050565b61365d816139f6565b82525050565b600061366f8284613451565b915081905092915050565b60006136868286613451565b91506136928285613451565b915061369e828461339b565b601482019150819050949350505050565b60006020820190506136c4600083018461338c565b92915050565b6000610160820190506136e0600083018e61338c565b81810360208301526136f2818d613418565b90508181036040830152613706818c613418565b9050613715606083018b613636565b613722608083018a613636565b61372f60a083018961338c565b61373c60c083018861338c565b61374960e0830187613654565b613757610100830186613654565b613765610120830185613654565b6137736101408301846133c1565b9c9b505050505050505050505050565b6000604082019050613798600083018561338c565b6137a56020830184613654565b9392505050565b60006020820190506137c160008301846133c1565b92915050565b60006020820190506137dc60008301846133d0565b92915050565b600060208201905081810360008301526137fc8184613418565b905092915050565b6000606082019050818103600083015261381e8186613418565b905081810360208301526138328185613418565b9050613841604083018461338c565b949350505050565b600060608201905081810360008301526138638186613418565b905081810360208301526138778185613418565b9050613886604083018461336e565b949350505050565b600060208201905081810360008301526138a781613482565b9050919050565b600060208201905081810360008301526138c7816134c2565b9050919050565b60006040820190506138e36000830184613502565b92915050565b600060208201905081810360008301526139038184613531565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561393257613931613a9f565b5b8060405250919050565b600067ffffffffffffffff82111561395757613956613a9f565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006139af826139cc565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613a0e82613a15565b9050919050565b6000613a2082613a27565b9050919050565b6000613a32826139cc565b9050919050565b82818337600083830152505050565b60005b83811015613a66578082015181840152602081019050613a4b565b83811115613a75576000848401525b50505050565b6000613a8682613a8d565b9050919050565b6000613a9882613ab2565b9050919050565bfe5b6000601f19601f8301169050919050565b60008160601b9050919050565b613ac8816139a4565b8114613ad357600080fd5b50565b613adf816139b6565b8114613aea57600080fd5b50565b613af6816139c2565b8114613b0157600080fd5b50565b613b0d816139ec565b8114613b1857600080fd5b50565b613b24816139f6565b8114613b2f57600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a2646970667358221220f37aae34ff7887774c6584636b7b0ccea27c86c360bf80766b55f5ec256b934364736f6c63430007060033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// CreatorReferral is a free data retrieval call binding the contract method 0xdd79506d.
//
// Solidity: function creatorReferral(bytes32 ) view returns(address referral, uint8 referralPercentage)
func (_Registry *RegistryCaller) CreatorReferral(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Referral           common.Address
	ReferralPercentage uint8
}, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "creatorReferral", arg0)

	outstruct := new(struct {
		Referral           common.Address
		ReferralPercentage uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Referral = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.ReferralPercentage = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// CreatorReferral is a free data retrieval call binding the contract method 0xdd79506d.
//
// Solidity: function creatorReferral(bytes32 ) view returns(address referral, uint8 referralPercentage)
func (_Registry *RegistrySession) CreatorReferral(arg0 [32]byte) (struct {
	Referral           common.Address
	ReferralPercentage uint8
}, error) {
	return _Registry.Contract.CreatorReferral(&_Registry.CallOpts, arg0)
}

// CreatorReferral is a free data retrieval call binding the contract method 0xdd79506d.
//
// Solidity: function creatorReferral(bytes32 ) view returns(address referral, uint8 referralPercentage)
func (_Registry *RegistryCallerSession) CreatorReferral(arg0 [32]byte) (struct {
	Referral           common.Address
	ReferralPercentage uint8
}, error) {
	return _Registry.Contract.CreatorReferral(&_Registry.CallOpts, arg0)
}

// GetCreatorByIndex is a free data retrieval call binding the contract method 0x969033a4.
//
// Solidity: function getCreatorByIndex(bytes32 _hashIndex) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistryCaller) GetCreatorByIndex(opts *bind.CallOpts, _hashIndex [32]byte) (Struct0, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getCreatorByIndex", _hashIndex)

	if err != nil {
		return *new(Struct0), err
	}

	out0 := *abi.ConvertType(out[0], new(Struct0)).(*Struct0)

	return out0, err

}

// GetCreatorByIndex is a free data retrieval call binding the contract method 0x969033a4.
//
// Solidity: function getCreatorByIndex(bytes32 _hashIndex) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistrySession) GetCreatorByIndex(_hashIndex [32]byte) (Struct0, error) {
	return _Registry.Contract.GetCreatorByIndex(&_Registry.CallOpts, _hashIndex)
}

// GetCreatorByIndex is a free data retrieval call binding the contract method 0x969033a4.
//
// Solidity: function getCreatorByIndex(bytes32 _hashIndex) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistryCallerSession) GetCreatorByIndex(_hashIndex [32]byte) (Struct0, error) {
	return _Registry.Contract.GetCreatorByIndex(&_Registry.CallOpts, _hashIndex)
}

// GetCreatorByName is a free data retrieval call binding the contract method 0x0aed6660.
//
// Solidity: function getCreatorByName(string _name) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistryCaller) GetCreatorByName(opts *bind.CallOpts, _name string) (Struct0, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getCreatorByName", _name)

	if err != nil {
		return *new(Struct0), err
	}

	out0 := *abi.ConvertType(out[0], new(Struct0)).(*Struct0)

	return out0, err

}

// GetCreatorByName is a free data retrieval call binding the contract method 0x0aed6660.
//
// Solidity: function getCreatorByName(string _name) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistrySession) GetCreatorByName(_name string) (Struct0, error) {
	return _Registry.Contract.GetCreatorByName(&_Registry.CallOpts, _name)
}

// GetCreatorByName is a free data retrieval call binding the contract method 0x0aed6660.
//
// Solidity: function getCreatorByName(string _name) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistryCallerSession) GetCreatorByName(_name string) (Struct0, error) {
	return _Registry.Contract.GetCreatorByName(&_Registry.CallOpts, _name)
}

// GetCreatorBySymbol is a free data retrieval call binding the contract method 0x775e3477.
//
// Solidity: function getCreatorBySymbol(string _symbol) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistryCaller) GetCreatorBySymbol(opts *bind.CallOpts, _symbol string) (Struct0, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getCreatorBySymbol", _symbol)

	if err != nil {
		return *new(Struct0), err
	}

	out0 := *abi.ConvertType(out[0], new(Struct0)).(*Struct0)

	return out0, err

}

// GetCreatorBySymbol is a free data retrieval call binding the contract method 0x775e3477.
//
// Solidity: function getCreatorBySymbol(string _symbol) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistrySession) GetCreatorBySymbol(_symbol string) (Struct0, error) {
	return _Registry.Contract.GetCreatorBySymbol(&_Registry.CallOpts, _symbol)
}

// GetCreatorBySymbol is a free data retrieval call binding the contract method 0x775e3477.
//
// Solidity: function getCreatorBySymbol(string _symbol) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistryCallerSession) GetCreatorBySymbol(_symbol string) (Struct0, error) {
	return _Registry.Contract.GetCreatorBySymbol(&_Registry.CallOpts, _symbol)
}

// GetCreatorReferralByIndex is a free data retrieval call binding the contract method 0x05e1ac7b.
//
// Solidity: function getCreatorReferralByIndex(bytes32 _hashIndex) view returns((address,uint8))
func (_Registry *RegistryCaller) GetCreatorReferralByIndex(opts *bind.CallOpts, _hashIndex [32]byte) (Struct1, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getCreatorReferralByIndex", _hashIndex)

	if err != nil {
		return *new(Struct1), err
	}

	out0 := *abi.ConvertType(out[0], new(Struct1)).(*Struct1)

	return out0, err

}

// GetCreatorReferralByIndex is a free data retrieval call binding the contract method 0x05e1ac7b.
//
// Solidity: function getCreatorReferralByIndex(bytes32 _hashIndex) view returns((address,uint8))
func (_Registry *RegistrySession) GetCreatorReferralByIndex(_hashIndex [32]byte) (Struct1, error) {
	return _Registry.Contract.GetCreatorReferralByIndex(&_Registry.CallOpts, _hashIndex)
}

// GetCreatorReferralByIndex is a free data retrieval call binding the contract method 0x05e1ac7b.
//
// Solidity: function getCreatorReferralByIndex(bytes32 _hashIndex) view returns((address,uint8))
func (_Registry *RegistryCallerSession) GetCreatorReferralByIndex(_hashIndex [32]byte) (Struct1, error) {
	return _Registry.Contract.GetCreatorReferralByIndex(&_Registry.CallOpts, _hashIndex)
}

// GetIndexByName is a free data retrieval call binding the contract method 0xc0af8582.
//
// Solidity: function getIndexByName(string _name) view returns(bytes32)
func (_Registry *RegistryCaller) GetIndexByName(opts *bind.CallOpts, _name string) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getIndexByName", _name)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetIndexByName is a free data retrieval call binding the contract method 0xc0af8582.
//
// Solidity: function getIndexByName(string _name) view returns(bytes32)
func (_Registry *RegistrySession) GetIndexByName(_name string) ([32]byte, error) {
	return _Registry.Contract.GetIndexByName(&_Registry.CallOpts, _name)
}

// GetIndexByName is a free data retrieval call binding the contract method 0xc0af8582.
//
// Solidity: function getIndexByName(string _name) view returns(bytes32)
func (_Registry *RegistryCallerSession) GetIndexByName(_name string) ([32]byte, error) {
	return _Registry.Contract.GetIndexByName(&_Registry.CallOpts, _name)
}

// GetIndexBySymbol is a free data retrieval call binding the contract method 0x9515d3ea.
//
// Solidity: function getIndexBySymbol(string _symbol) view returns(bytes32)
func (_Registry *RegistryCaller) GetIndexBySymbol(opts *bind.CallOpts, _symbol string) ([32]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getIndexBySymbol", _symbol)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetIndexBySymbol is a free data retrieval call binding the contract method 0x9515d3ea.
//
// Solidity: function getIndexBySymbol(string _symbol) view returns(bytes32)
func (_Registry *RegistrySession) GetIndexBySymbol(_symbol string) ([32]byte, error) {
	return _Registry.Contract.GetIndexBySymbol(&_Registry.CallOpts, _symbol)
}

// GetIndexBySymbol is a free data retrieval call binding the contract method 0x9515d3ea.
//
// Solidity: function getIndexBySymbol(string _symbol) view returns(bytes32)
func (_Registry *RegistryCallerSession) GetIndexBySymbol(_symbol string) ([32]byte, error) {
	return _Registry.Contract.GetIndexBySymbol(&_Registry.CallOpts, _symbol)
}

// LegacyProposals is a free data retrieval call binding the contract method 0x3ba09f13.
//
// Solidity: function legacyProposals(string _name) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistryCaller) LegacyProposals(opts *bind.CallOpts, _name string) (Struct0, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "legacyProposals", _name)

	if err != nil {
		return *new(Struct0), err
	}

	out0 := *abi.ConvertType(out[0], new(Struct0)).(*Struct0)

	return out0, err

}

// LegacyProposals is a free data retrieval call binding the contract method 0x3ba09f13.
//
// Solidity: function legacyProposals(string _name) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistrySession) LegacyProposals(_name string) (Struct0, error) {
	return _Registry.Contract.LegacyProposals(&_Registry.CallOpts, _name)
}

// LegacyProposals is a free data retrieval call binding the contract method 0x3ba09f13.
//
// Solidity: function legacyProposals(string _name) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistryCallerSession) LegacyProposals(_name string) (Struct0, error) {
	return _Registry.Contract.LegacyProposals(&_Registry.CallOpts, _name)
}

// LegacyProposalsByIndex is a free data retrieval call binding the contract method 0xc95b85f5.
//
// Solidity: function legacyProposalsByIndex(bytes32 hashIndex) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistryCaller) LegacyProposalsByIndex(opts *bind.CallOpts, hashIndex [32]byte) (Struct0, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "legacyProposalsByIndex", hashIndex)

	if err != nil {
		return *new(Struct0), err
	}

	out0 := *abi.ConvertType(out[0], new(Struct0)).(*Struct0)

	return out0, err

}

// LegacyProposalsByIndex is a free data retrieval call binding the contract method 0xc95b85f5.
//
// Solidity: function legacyProposalsByIndex(bytes32 hashIndex) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistrySession) LegacyProposalsByIndex(hashIndex [32]byte) (Struct0, error) {
	return _Registry.Contract.LegacyProposalsByIndex(&_Registry.CallOpts, hashIndex)
}

// LegacyProposalsByIndex is a free data retrieval call binding the contract method 0xc95b85f5.
//
// Solidity: function legacyProposalsByIndex(bytes32 hashIndex) view returns((address,string,string,uint256,uint256,address,address,uint8,uint8,uint8,bool))
func (_Registry *RegistryCallerSession) LegacyProposalsByIndex(hashIndex [32]byte) (Struct0, error) {
	return _Registry.Contract.LegacyProposalsByIndex(&_Registry.CallOpts, hashIndex)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistrySession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCallerSession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// Rolodex is a free data retrieval call binding the contract method 0x469dfdc1.
//
// Solidity: function rolodex(bytes32 ) view returns(address token, string name, string symbol, uint256 totalSupply, uint256 vestingPeriodInDays, address proposer, address vestingBeneficiary, uint8 initialPlatformPercentage, uint8 decimals, uint8 initialPercentage, bool approved)
func (_Registry *RegistryCaller) Rolodex(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Token                     common.Address
	Name                      string
	Symbol                    string
	TotalSupply               *big.Int
	VestingPeriodInDays       *big.Int
	Proposer                  common.Address
	VestingBeneficiary        common.Address
	InitialPlatformPercentage uint8
	Decimals                  uint8
	InitialPercentage         uint8
	Approved                  bool
}, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "rolodex", arg0)

	outstruct := new(struct {
		Token                     common.Address
		Name                      string
		Symbol                    string
		TotalSupply               *big.Int
		VestingPeriodInDays       *big.Int
		Proposer                  common.Address
		VestingBeneficiary        common.Address
		InitialPlatformPercentage uint8
		Decimals                  uint8
		InitialPercentage         uint8
		Approved                  bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Token = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Symbol = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.TotalSupply = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VestingPeriodInDays = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Proposer = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	outstruct.VestingBeneficiary = *abi.ConvertType(out[6], new(common.Address)).(*common.Address)
	outstruct.InitialPlatformPercentage = *abi.ConvertType(out[7], new(uint8)).(*uint8)
	outstruct.Decimals = *abi.ConvertType(out[8], new(uint8)).(*uint8)
	outstruct.InitialPercentage = *abi.ConvertType(out[9], new(uint8)).(*uint8)
	outstruct.Approved = *abi.ConvertType(out[10], new(bool)).(*bool)

	return *outstruct, err

}

// Rolodex is a free data retrieval call binding the contract method 0x469dfdc1.
//
// Solidity: function rolodex(bytes32 ) view returns(address token, string name, string symbol, uint256 totalSupply, uint256 vestingPeriodInDays, address proposer, address vestingBeneficiary, uint8 initialPlatformPercentage, uint8 decimals, uint8 initialPercentage, bool approved)
func (_Registry *RegistrySession) Rolodex(arg0 [32]byte) (struct {
	Token                     common.Address
	Name                      string
	Symbol                    string
	TotalSupply               *big.Int
	VestingPeriodInDays       *big.Int
	Proposer                  common.Address
	VestingBeneficiary        common.Address
	InitialPlatformPercentage uint8
	Decimals                  uint8
	InitialPercentage         uint8
	Approved                  bool
}, error) {
	return _Registry.Contract.Rolodex(&_Registry.CallOpts, arg0)
}

// Rolodex is a free data retrieval call binding the contract method 0x469dfdc1.
//
// Solidity: function rolodex(bytes32 ) view returns(address token, string name, string symbol, uint256 totalSupply, uint256 vestingPeriodInDays, address proposer, address vestingBeneficiary, uint8 initialPlatformPercentage, uint8 decimals, uint8 initialPercentage, bool approved)
func (_Registry *RegistryCallerSession) Rolodex(arg0 [32]byte) (struct {
	Token                     common.Address
	Name                      string
	Symbol                    string
	TotalSupply               *big.Int
	VestingPeriodInDays       *big.Int
	Proposer                  common.Address
	VestingBeneficiary        common.Address
	InitialPlatformPercentage uint8
	Decimals                  uint8
	InitialPercentage         uint8
	Approved                  bool
}, error) {
	return _Registry.Contract.Rolodex(&_Registry.CallOpts, arg0)
}

// ApproveProposal is a paid mutator transaction binding the contract method 0x26c52914.
//
// Solidity: function approveProposal(bytes32 _hashIndex, address _token) returns(bool)
func (_Registry *RegistryTransactor) ApproveProposal(opts *bind.TransactOpts, _hashIndex [32]byte, _token common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "approveProposal", _hashIndex, _token)
}

// ApproveProposal is a paid mutator transaction binding the contract method 0x26c52914.
//
// Solidity: function approveProposal(bytes32 _hashIndex, address _token) returns(bool)
func (_Registry *RegistrySession) ApproveProposal(_hashIndex [32]byte, _token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.ApproveProposal(&_Registry.TransactOpts, _hashIndex, _token)
}

// ApproveProposal is a paid mutator transaction binding the contract method 0x26c52914.
//
// Solidity: function approveProposal(bytes32 _hashIndex, address _token) returns(bool)
func (_Registry *RegistryTransactorSession) ApproveProposal(_hashIndex [32]byte, _token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.ApproveProposal(&_Registry.TransactOpts, _hashIndex, _token)
}

// ImportByIndex is a paid mutator transaction binding the contract method 0x397a88a1.
//
// Solidity: function importByIndex(bytes32 _hashIndex, address _oldRegistry) returns()
func (_Registry *RegistryTransactor) ImportByIndex(opts *bind.TransactOpts, _hashIndex [32]byte, _oldRegistry common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "importByIndex", _hashIndex, _oldRegistry)
}

// ImportByIndex is a paid mutator transaction binding the contract method 0x397a88a1.
//
// Solidity: function importByIndex(bytes32 _hashIndex, address _oldRegistry) returns()
func (_Registry *RegistrySession) ImportByIndex(_hashIndex [32]byte, _oldRegistry common.Address) (*types.Transaction, error) {
	return _Registry.Contract.ImportByIndex(&_Registry.TransactOpts, _hashIndex, _oldRegistry)
}

// ImportByIndex is a paid mutator transaction binding the contract method 0x397a88a1.
//
// Solidity: function importByIndex(bytes32 _hashIndex, address _oldRegistry) returns()
func (_Registry *RegistryTransactorSession) ImportByIndex(_hashIndex [32]byte, _oldRegistry common.Address) (*types.Transaction, error) {
	return _Registry.Contract.ImportByIndex(&_Registry.TransactOpts, _hashIndex, _oldRegistry)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Registry *RegistryTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Registry *RegistrySession) Initialize() (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Registry *RegistryTransactorSession) Initialize() (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// SetLegacyRegistryAddress is a paid mutator transaction binding the contract method 0xdf79a53d.
//
// Solidity: function setLegacyRegistryAddress(address _legacyRegistry) returns()
func (_Registry *RegistryTransactor) SetLegacyRegistryAddress(opts *bind.TransactOpts, _legacyRegistry common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setLegacyRegistryAddress", _legacyRegistry)
}

// SetLegacyRegistryAddress is a paid mutator transaction binding the contract method 0xdf79a53d.
//
// Solidity: function setLegacyRegistryAddress(address _legacyRegistry) returns()
func (_Registry *RegistrySession) SetLegacyRegistryAddress(_legacyRegistry common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetLegacyRegistryAddress(&_Registry.TransactOpts, _legacyRegistry)
}

// SetLegacyRegistryAddress is a paid mutator transaction binding the contract method 0xdf79a53d.
//
// Solidity: function setLegacyRegistryAddress(address _legacyRegistry) returns()
func (_Registry *RegistryTransactorSession) SetLegacyRegistryAddress(_legacyRegistry common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetLegacyRegistryAddress(&_Registry.TransactOpts, _legacyRegistry)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0xd490cb74.
//
// Solidity: function submitProposal(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply, uint8 _initialPercentage, uint256 _vestingPeriodInDays, address _vestingBeneficiary, address _proposer, uint8 _initialPlatformPercentage) returns(bytes32 hashIndex)
func (_Registry *RegistryTransactor) SubmitProposal(opts *bind.TransactOpts, _name string, _symbol string, _decimals uint8, _totalSupply *big.Int, _initialPercentage uint8, _vestingPeriodInDays *big.Int, _vestingBeneficiary common.Address, _proposer common.Address, _initialPlatformPercentage uint8) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "submitProposal", _name, _symbol, _decimals, _totalSupply, _initialPercentage, _vestingPeriodInDays, _vestingBeneficiary, _proposer, _initialPlatformPercentage)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0xd490cb74.
//
// Solidity: function submitProposal(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply, uint8 _initialPercentage, uint256 _vestingPeriodInDays, address _vestingBeneficiary, address _proposer, uint8 _initialPlatformPercentage) returns(bytes32 hashIndex)
func (_Registry *RegistrySession) SubmitProposal(_name string, _symbol string, _decimals uint8, _totalSupply *big.Int, _initialPercentage uint8, _vestingPeriodInDays *big.Int, _vestingBeneficiary common.Address, _proposer common.Address, _initialPlatformPercentage uint8) (*types.Transaction, error) {
	return _Registry.Contract.SubmitProposal(&_Registry.TransactOpts, _name, _symbol, _decimals, _totalSupply, _initialPercentage, _vestingPeriodInDays, _vestingBeneficiary, _proposer, _initialPlatformPercentage)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0xd490cb74.
//
// Solidity: function submitProposal(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply, uint8 _initialPercentage, uint256 _vestingPeriodInDays, address _vestingBeneficiary, address _proposer, uint8 _initialPlatformPercentage) returns(bytes32 hashIndex)
func (_Registry *RegistryTransactorSession) SubmitProposal(_name string, _symbol string, _decimals uint8, _totalSupply *big.Int, _initialPercentage uint8, _vestingPeriodInDays *big.Int, _vestingBeneficiary common.Address, _proposer common.Address, _initialPlatformPercentage uint8) (*types.Transaction, error) {
	return _Registry.Contract.SubmitProposal(&_Registry.TransactOpts, _name, _symbol, _decimals, _totalSupply, _initialPercentage, _vestingPeriodInDays, _vestingBeneficiary, _proposer, _initialPlatformPercentage)
}

// SubmitProposalReferral is a paid mutator transaction binding the contract method 0xb13873f0.
//
// Solidity: function submitProposalReferral(bytes32 _hashIndex, address _referral, uint8 _referralPercentage) returns()
func (_Registry *RegistryTransactor) SubmitProposalReferral(opts *bind.TransactOpts, _hashIndex [32]byte, _referral common.Address, _referralPercentage uint8) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "submitProposalReferral", _hashIndex, _referral, _referralPercentage)
}

// SubmitProposalReferral is a paid mutator transaction binding the contract method 0xb13873f0.
//
// Solidity: function submitProposalReferral(bytes32 _hashIndex, address _referral, uint8 _referralPercentage) returns()
func (_Registry *RegistrySession) SubmitProposalReferral(_hashIndex [32]byte, _referral common.Address, _referralPercentage uint8) (*types.Transaction, error) {
	return _Registry.Contract.SubmitProposalReferral(&_Registry.TransactOpts, _hashIndex, _referral, _referralPercentage)
}

// SubmitProposalReferral is a paid mutator transaction binding the contract method 0xb13873f0.
//
// Solidity: function submitProposalReferral(bytes32 _hashIndex, address _referral, uint8 _referralPercentage) returns()
func (_Registry *RegistryTransactorSession) SubmitProposalReferral(_hashIndex [32]byte, _referral common.Address, _referralPercentage uint8) (*types.Transaction, error) {
	return _Registry.Contract.SubmitProposalReferral(&_Registry.TransactOpts, _hashIndex, _referral, _referralPercentage)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// RegistryLogProposalApproveIterator is returned from FilterLogProposalApprove and is used to iterate over the raw logs and unpacked data for LogProposalApprove events raised by the Registry contract.
type RegistryLogProposalApproveIterator struct {
	Event *RegistryLogProposalApprove // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryLogProposalApproveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryLogProposalApprove)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryLogProposalApprove)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryLogProposalApproveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryLogProposalApproveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryLogProposalApprove represents a LogProposalApprove event raised by the Registry contract.
type RegistryLogProposalApprove struct {
	Name         string
	TokenAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterLogProposalApprove is a free log retrieval operation binding the contract event 0x19e9fff5bfdce65750e43ae23fbd302202cd96c991da16e86fdf447b87bfa368.
//
// Solidity: event LogProposalApprove(string name, address indexed tokenAddress)
func (_Registry *RegistryFilterer) FilterLogProposalApprove(opts *bind.FilterOpts, tokenAddress []common.Address) (*RegistryLogProposalApproveIterator, error) {

	var tokenAddressRule []interface{}
	for _, tokenAddressItem := range tokenAddress {
		tokenAddressRule = append(tokenAddressRule, tokenAddressItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "LogProposalApprove", tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &RegistryLogProposalApproveIterator{contract: _Registry.contract, event: "LogProposalApprove", logs: logs, sub: sub}, nil
}

// WatchLogProposalApprove is a free log subscription operation binding the contract event 0x19e9fff5bfdce65750e43ae23fbd302202cd96c991da16e86fdf447b87bfa368.
//
// Solidity: event LogProposalApprove(string name, address indexed tokenAddress)
func (_Registry *RegistryFilterer) WatchLogProposalApprove(opts *bind.WatchOpts, sink chan<- *RegistryLogProposalApprove, tokenAddress []common.Address) (event.Subscription, error) {

	var tokenAddressRule []interface{}
	for _, tokenAddressItem := range tokenAddress {
		tokenAddressRule = append(tokenAddressRule, tokenAddressItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "LogProposalApprove", tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryLogProposalApprove)
				if err := _Registry.contract.UnpackLog(event, "LogProposalApprove", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogProposalApprove is a log parse operation binding the contract event 0x19e9fff5bfdce65750e43ae23fbd302202cd96c991da16e86fdf447b87bfa368.
//
// Solidity: event LogProposalApprove(string name, address indexed tokenAddress)
func (_Registry *RegistryFilterer) ParseLogProposalApprove(log types.Log) (*RegistryLogProposalApprove, error) {
	event := new(RegistryLogProposalApprove)
	if err := _Registry.contract.UnpackLog(event, "LogProposalApprove", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryLogProposalImportedIterator is returned from FilterLogProposalImported and is used to iterate over the raw logs and unpacked data for LogProposalImported events raised by the Registry contract.
type RegistryLogProposalImportedIterator struct {
	Event *RegistryLogProposalImported // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryLogProposalImportedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryLogProposalImported)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryLogProposalImported)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryLogProposalImportedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryLogProposalImportedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryLogProposalImported represents a LogProposalImported event raised by the Registry contract.
type RegistryLogProposalImported struct {
	Name      string
	Symbol    string
	Proposer  common.Address
	HashIndex [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogProposalImported is a free log retrieval operation binding the contract event 0x82c68a30819d3b8f0c181d716ed3fafa8551cad68eefe911f471516e958421b3.
//
// Solidity: event LogProposalImported(string name, string symbol, address proposer, bytes32 indexed hashIndex)
func (_Registry *RegistryFilterer) FilterLogProposalImported(opts *bind.FilterOpts, hashIndex [][32]byte) (*RegistryLogProposalImportedIterator, error) {

	var hashIndexRule []interface{}
	for _, hashIndexItem := range hashIndex {
		hashIndexRule = append(hashIndexRule, hashIndexItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "LogProposalImported", hashIndexRule)
	if err != nil {
		return nil, err
	}
	return &RegistryLogProposalImportedIterator{contract: _Registry.contract, event: "LogProposalImported", logs: logs, sub: sub}, nil
}

// WatchLogProposalImported is a free log subscription operation binding the contract event 0x82c68a30819d3b8f0c181d716ed3fafa8551cad68eefe911f471516e958421b3.
//
// Solidity: event LogProposalImported(string name, string symbol, address proposer, bytes32 indexed hashIndex)
func (_Registry *RegistryFilterer) WatchLogProposalImported(opts *bind.WatchOpts, sink chan<- *RegistryLogProposalImported, hashIndex [][32]byte) (event.Subscription, error) {

	var hashIndexRule []interface{}
	for _, hashIndexItem := range hashIndex {
		hashIndexRule = append(hashIndexRule, hashIndexItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "LogProposalImported", hashIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryLogProposalImported)
				if err := _Registry.contract.UnpackLog(event, "LogProposalImported", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogProposalImported is a log parse operation binding the contract event 0x82c68a30819d3b8f0c181d716ed3fafa8551cad68eefe911f471516e958421b3.
//
// Solidity: event LogProposalImported(string name, string symbol, address proposer, bytes32 indexed hashIndex)
func (_Registry *RegistryFilterer) ParseLogProposalImported(log types.Log) (*RegistryLogProposalImported, error) {
	event := new(RegistryLogProposalImported)
	if err := _Registry.contract.UnpackLog(event, "LogProposalImported", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryLogProposalReferralSubmitIterator is returned from FilterLogProposalReferralSubmit and is used to iterate over the raw logs and unpacked data for LogProposalReferralSubmit events raised by the Registry contract.
type RegistryLogProposalReferralSubmitIterator struct {
	Event *RegistryLogProposalReferralSubmit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryLogProposalReferralSubmitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryLogProposalReferralSubmit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryLogProposalReferralSubmit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryLogProposalReferralSubmitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryLogProposalReferralSubmitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryLogProposalReferralSubmit represents a LogProposalReferralSubmit event raised by the Registry contract.
type RegistryLogProposalReferralSubmit struct {
	Referral           common.Address
	ReferralPercentage uint8
	HashIndex          [32]byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterLogProposalReferralSubmit is a free log retrieval operation binding the contract event 0x924a2d7699539105c99283e511a2a67d57aecd39d59697c4a76cb2187fddb6ce.
//
// Solidity: event LogProposalReferralSubmit(address referral, uint8 referralPercentage, bytes32 indexed hashIndex)
func (_Registry *RegistryFilterer) FilterLogProposalReferralSubmit(opts *bind.FilterOpts, hashIndex [][32]byte) (*RegistryLogProposalReferralSubmitIterator, error) {

	var hashIndexRule []interface{}
	for _, hashIndexItem := range hashIndex {
		hashIndexRule = append(hashIndexRule, hashIndexItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "LogProposalReferralSubmit", hashIndexRule)
	if err != nil {
		return nil, err
	}
	return &RegistryLogProposalReferralSubmitIterator{contract: _Registry.contract, event: "LogProposalReferralSubmit", logs: logs, sub: sub}, nil
}

// WatchLogProposalReferralSubmit is a free log subscription operation binding the contract event 0x924a2d7699539105c99283e511a2a67d57aecd39d59697c4a76cb2187fddb6ce.
//
// Solidity: event LogProposalReferralSubmit(address referral, uint8 referralPercentage, bytes32 indexed hashIndex)
func (_Registry *RegistryFilterer) WatchLogProposalReferralSubmit(opts *bind.WatchOpts, sink chan<- *RegistryLogProposalReferralSubmit, hashIndex [][32]byte) (event.Subscription, error) {

	var hashIndexRule []interface{}
	for _, hashIndexItem := range hashIndex {
		hashIndexRule = append(hashIndexRule, hashIndexItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "LogProposalReferralSubmit", hashIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryLogProposalReferralSubmit)
				if err := _Registry.contract.UnpackLog(event, "LogProposalReferralSubmit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogProposalReferralSubmit is a log parse operation binding the contract event 0x924a2d7699539105c99283e511a2a67d57aecd39d59697c4a76cb2187fddb6ce.
//
// Solidity: event LogProposalReferralSubmit(address referral, uint8 referralPercentage, bytes32 indexed hashIndex)
func (_Registry *RegistryFilterer) ParseLogProposalReferralSubmit(log types.Log) (*RegistryLogProposalReferralSubmit, error) {
	event := new(RegistryLogProposalReferralSubmit)
	if err := _Registry.contract.UnpackLog(event, "LogProposalReferralSubmit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryLogProposalSubmitIterator is returned from FilterLogProposalSubmit and is used to iterate over the raw logs and unpacked data for LogProposalSubmit events raised by the Registry contract.
type RegistryLogProposalSubmitIterator struct {
	Event *RegistryLogProposalSubmit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryLogProposalSubmitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryLogProposalSubmit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryLogProposalSubmit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryLogProposalSubmitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryLogProposalSubmitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryLogProposalSubmit represents a LogProposalSubmit event raised by the Registry contract.
type RegistryLogProposalSubmit struct {
	Name      string
	Symbol    string
	Proposer  common.Address
	HashIndex [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogProposalSubmit is a free log retrieval operation binding the contract event 0xc59aae764581590a3a647db2078529d429d40d2a95b2ebdb110b5515023a23c1.
//
// Solidity: event LogProposalSubmit(string name, string symbol, address proposer, bytes32 indexed hashIndex)
func (_Registry *RegistryFilterer) FilterLogProposalSubmit(opts *bind.FilterOpts, hashIndex [][32]byte) (*RegistryLogProposalSubmitIterator, error) {

	var hashIndexRule []interface{}
	for _, hashIndexItem := range hashIndex {
		hashIndexRule = append(hashIndexRule, hashIndexItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "LogProposalSubmit", hashIndexRule)
	if err != nil {
		return nil, err
	}
	return &RegistryLogProposalSubmitIterator{contract: _Registry.contract, event: "LogProposalSubmit", logs: logs, sub: sub}, nil
}

// WatchLogProposalSubmit is a free log subscription operation binding the contract event 0xc59aae764581590a3a647db2078529d429d40d2a95b2ebdb110b5515023a23c1.
//
// Solidity: event LogProposalSubmit(string name, string symbol, address proposer, bytes32 indexed hashIndex)
func (_Registry *RegistryFilterer) WatchLogProposalSubmit(opts *bind.WatchOpts, sink chan<- *RegistryLogProposalSubmit, hashIndex [][32]byte) (event.Subscription, error) {

	var hashIndexRule []interface{}
	for _, hashIndexItem := range hashIndex {
		hashIndexRule = append(hashIndexRule, hashIndexItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "LogProposalSubmit", hashIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryLogProposalSubmit)
				if err := _Registry.contract.UnpackLog(event, "LogProposalSubmit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogProposalSubmit is a log parse operation binding the contract event 0xc59aae764581590a3a647db2078529d429d40d2a95b2ebdb110b5515023a23c1.
//
// Solidity: event LogProposalSubmit(string name, string symbol, address proposer, bytes32 indexed hashIndex)
func (_Registry *RegistryFilterer) ParseLogProposalSubmit(log types.Log) (*RegistryLogProposalSubmit, error) {
	event := new(RegistryLogProposalSubmit)
	if err := _Registry.contract.UnpackLog(event, "LogProposalSubmit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Registry contract.
type RegistryOwnershipTransferredIterator struct {
	Event *RegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOwnershipTransferred represents a OwnershipTransferred event raised by the Registry contract.
type RegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOwnershipTransferredIterator{contract: _Registry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOwnershipTransferred)
				if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) ParseOwnershipTransferred(log types.Log) (*RegistryOwnershipTransferred, error) {
	event := new(RegistryOwnershipTransferred)
	if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
