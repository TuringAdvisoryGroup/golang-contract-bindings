// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ManagerMetaData contains all meta data concerning the Manager contract.
var ManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"event\",\"anonymous\":false,\"name\":\"LogManagerMigrated\",\"inputs\":[{\"type\":\"address\",\"name\":\"newManager\",\"indexed\":true}]},{\"type\":\"event\",\"anonymous\":false,\"name\":\"LogRegistryChanged\",\"inputs\":[{\"type\":\"address\",\"name\":\"oldR\",\"indexed\":false},{\"type\":\"address\",\"name\":\"newR\",\"indexed\":false}]},{\"type\":\"event\",\"anonymous\":false,\"name\":\"LogTokenFactoryChanged\",\"inputs\":[{\"type\":\"address\",\"name\":\"oldTF\",\"indexed\":false},{\"type\":\"address\",\"name\":\"newTF\",\"indexed\":false}]},{\"type\":\"event\",\"anonymous\":false,\"name\":\"OwnershipTransferred\",\"inputs\":[{\"type\":\"address\",\"name\":\"previousOwner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"newOwner\",\"indexed\":true}]},{\"type\":\"function\",\"name\":\"RegistryInstance\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[],\"outputs\":[{\"type\":\"address\"}]},{\"type\":\"function\",\"name\":\"TokenFactoryInstance\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[],\"outputs\":[{\"type\":\"address\"}]},{\"type\":\"function\",\"name\":\"approveProposal\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_hashIndex\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"initialize\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"address\",\"name\":\"_registry\"},{\"type\":\"address\",\"name\":\"_tokenFactory\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"initialized\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[],\"outputs\":[{\"type\":\"bool\"}]},{\"type\":\"function\",\"name\":\"migrateManager\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"address\",\"name\":\"_newManager\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"owner\",\"constant\":true,\"stateMutability\":\"view\",\"payable\":false,\"inputs\":[],\"outputs\":[{\"type\":\"address\"}]},{\"type\":\"function\",\"name\":\"parseAddr\",\"constant\":true,\"stateMutability\":\"pure\",\"payable\":false,\"inputs\":[{\"type\":\"bytes\",\"name\":\"data\"}],\"outputs\":[{\"type\":\"address\",\"name\":\"parsed\"}]},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"constant\":false,\"payable\":false,\"inputs\":[],\"outputs\":[]},{\"type\":\"function\",\"name\":\"setPlatformWallet\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"address\",\"name\":\"_newPlatformWallet\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"setRegistry\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"address\",\"name\":\"_newRegistry\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"setTokenFactory\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"address\",\"name\":\"_newTokenFactory\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"setTokenVesting\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"address\",\"name\":\"_newTokenVesting\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"setVestingAddress\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"address\",\"name\":\"_token\"},{\"type\":\"address\",\"name\":\"_vestingBeneficiary\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"setVestingReferral\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"address\",\"name\":\"_token\"},{\"type\":\"address\",\"name\":\"_vestingReferral\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"submitProposal\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"},{\"type\":\"string\",\"name\":\"_symbol\"},{\"type\":\"uint8\",\"name\":\"_decimals\"},{\"type\":\"uint256\",\"name\":\"_totalSupply\"},{\"type\":\"uint8\",\"name\":\"_initialPercentage\"},{\"type\":\"uint256\",\"name\":\"_vestingPeriodInDays\"},{\"type\":\"address\",\"name\":\"_vestingBeneficiary\"},{\"type\":\"uint8\",\"name\":\"_initialPlatformPercentage\"}],\"outputs\":[{\"type\":\"bytes32\",\"name\":\"hashIndex\"}]},{\"type\":\"function\",\"name\":\"submitReferral\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_hashIndex\"},{\"type\":\"address\",\"name\":\"_referral\"},{\"type\":\"uint8\",\"name\":\"_referralPercentage\"}],\"outputs\":[]},{\"type\":\"function\",\"name\":\"transferOwnership\",\"constant\":false,\"payable\":false,\"inputs\":[{\"type\":\"address\",\"name\":\"newOwner\"}],\"outputs\":[]}]",
	Bin: "0x608060405234801561001057600080fd5b506139ba806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063b75ceb7111610071578063b75ceb71146102a1578063bbba6e92146102bf578063c7a8db19146102dd578063f20b5b2c146102f9578063f2fde38b1461031557610116565b80638da5cb5b1461021b578063a8fc15c614610239578063a91ee0dc14610255578063b718f83a1461027157610116565b806343e34696116100e957806343e346961461018d578063485cc955146101a95780636709a651146101c5578063715018a6146101f55780638831e9cf146101ff57610116565b80630876eae51461011b578063158ef93e146101375780631fd49f4b146101555780632f73a9f814610171575b600080fd5b61013560048036038101906101309190612ad4565b610331565b005b61013f610436565b60405161014c919061330e565b60405180910390f35b61016f600480360381019061016a9190612b8b565b610685565b005b61018b60048036038101906101869190612a82565b6107bb565b005b6101a760048036038101906101a29190612a82565b610c89565b005b6101c360048036038101906101be9190612ad4565b610dc8565b005b6101df60048036038101906101da9190612c44565b610fec565b6040516101ec9190613329565b60405180910390f35b6101fd61120b565b005b61021960048036038101906102149190612a82565b61137b565b005b610223611501565b6040516102309190613293565b60405180910390f35b610253600480360381019061024e9190612ad4565b61152b565b005b61026f600480360381019061026a9190612a82565b611630565b005b61028b60048036038101906102869190612bda565b611869565b6040516102989190613293565b60405180910390f35b6102a9611877565b6040516102b691906133a4565b60405180910390f35b6102c761189d565b6040516102d491906133bf565b60405180910390f35b6102f760048036038101906102f29190612a82565b6118c3565b005b610313600480360381019061030e9190612b39565b611b19565b005b61032f600480360381019061032a9190612a82565b611fcf565b005b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610398906135bf565b60405180910390fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2e836f83384846040518463ffffffff1660e01b8152600401610400939291906132ae565b600060405180830381600087803b15801561041a57600080fd5b505af115801561042e573d6000803e3d6000fd5b505050505050565b600080606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663151ad6106040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a157600080fd5b505afa1580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d99190612c1b565b90503073ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561055a57600080fd5b505afa15801561056e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105929190612aab565b73ffffffffffffffffffffffffffffffffffffffff1614801561067f57503073ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561062f57600080fd5b505afa158015610643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106679190612aab565b73ffffffffffffffffffffffffffffffffffffffff16145b91505090565b8060008160ff161015801561069e575060648160ff1611155b6106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d49061359f565b60405180910390fd5b6106e5610436565b610724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071b9061355f565b60405180910390fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b13873f08585856040518463ffffffff1660e01b81526004016107839392919061336d565b600060405180830381600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b5050505050505050565b6107c36121c4565b73ffffffffffffffffffffffffffffffffffffffff166107e1611501565b73ffffffffffffffffffffffffffffffffffffffff161461086a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c757600080fd5b505afa1580156108db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ff9190612aab565b73ffffffffffffffffffffffffffffffffffffffff1614610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c9061357f565b60405180910390fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663151ad6106040518163ffffffff1660e01b815260040160206040518083038186803b1580156109bd57600080fd5b505afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f59190612c1b565b73ffffffffffffffffffffffffffffffffffffffff16610a14826121cc565b73ffffffffffffffffffffffffffffffffffffffff1614610a6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a619061365f565b60405180910390fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357796797826040518263ffffffff1660e01b8152600401610ac59190613293565b600060405180830381600087803b158015610adf57600080fd5b505af1158015610af3573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16610b17826121cc565b73ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5c57600080fd5b505afa158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b949190612aab565b73ffffffffffffffffffffffffffffffffffffffff1614610bea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be19061363f565b60405180910390fd5b7f4b517b4fb873b53bdb7db1289eb8ec3d2c92288dda09e8e68b3db0efade30b7e606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051610c3d9291906132e5565b60405180910390a180606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610c916121c4565b73ffffffffffffffffffffffffffffffffffffffff16610caf611501565b73ffffffffffffffffffffffffffffffffffffffff1614610d38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343e34696826040518263ffffffff1660e01b8152600401610d939190613293565b600060405180830381600087803b158015610dad57600080fd5b505af1158015610dc1573d6000803e3d6000fd5b5050505050565b600060019054906101000a900460ff1680610dee575060008054906101000a900460ff16155b610e43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613957602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015610e93576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015610efd5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f339061361f565b60405180910390fd5b610f44612314565b81606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610fe75760008060016101000a81548160ff0219169083151502179055505b505050565b60008460008160ff1610158015611007575060648160ff1611155b611046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103d9061359f565b60405180910390fd5b8260008160ff161015801561105f575060648160ff1611155b61109e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110959061359f565b60405180910390fd5b8860008160ff16101580156110b7575060128160ff1611155b6110f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ed906135df565b60405180910390fd5b6110fe610436565b61113d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111349061355f565b60405180910390fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d490cb748d8d8d8d8d8d8d338e6040518a63ffffffff1660e01b81526004016111a8999897969594939291906133da565b602060405180830381600087803b1580156111c257600080fd5b505af11580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa9190612b62565b935050505098975050505050505050565b6112136121c4565b73ffffffffffffffffffffffffffffffffffffffff16611231611501565b73ffffffffffffffffffffffffffffffffffffffff16146112ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6113836121c4565b73ffffffffffffffffffffffffffffffffffffffff166113a1611501565b73ffffffffffffffffffffffffffffffffffffffff161461142a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611432610436565b611471576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114689061355f565b60405180910390fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638831e9cf826040518263ffffffff1660e01b81526004016114cc9190613293565b600060405180830381600087803b1580156114e657600080fd5b505af11580156114fa573d6000803e3d6000fd5b5050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561159b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611592906135bf565b60405180910390fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c0cf20b3384846040518463ffffffff1660e01b81526004016115fa939291906132ae565b600060405180830381600087803b15801561161457600080fd5b505af1158015611628573d6000803e3d6000fd5b505050505050565b6116386121c4565b73ffffffffffffffffffffffffffffffffffffffff16611656611501565b73ffffffffffffffffffffffffffffffffffffffff16146116df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561173c57600080fd5b505afa158015611750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117749190612aab565b73ffffffffffffffffffffffffffffffffffffffff16146117ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c19061353f565b60405180910390fd5b7fec10a16af385903532506d1567380fd8d93d880e8ed4bcacc42b0848e781406a606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260405161181d9291906132e5565b60405180910390a180606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060208201519050919050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6118cb6121c4565b73ffffffffffffffffffffffffffffffffffffffff166118e9611501565b73ffffffffffffffffffffffffffffffffffffffff1614611972576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61197a610436565b6119b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b09061355f565b60405180910390fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b8152600401611a149190613293565b600060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b50505050606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b8152600401611aa19190613293565b600060405180830381600087803b158015611abb57600080fd5b505af1158015611acf573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167f829487e3aa7912bd48776fb898d596977df4debceb186d7575e27a94f70be17460405160405180910390a250565b611b21610436565b611b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b579061355f565b60405180910390fd5b611b686121c4565b73ffffffffffffffffffffffffffffffffffffffff16611b86611501565b73ffffffffffffffffffffffffffffffffffffffff1614611c0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663969033a4836040518263ffffffff1660e01b8152600401611c6c9190613329565b60006040518083038186803b158015611c8457600080fd5b505afa158015611c98573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611cc19190612d4f565b90506000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305e1ac7b846040518263ffffffff1660e01b8152600401611d209190613329565b604080518083038186803b158015611d3757600080fd5b505afa158015611d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6f9190612d26565b90506000816020015160ff168360e0015160ff1684610120015160ff160101905060ff801661ffff168161ffff161115611dde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd59061367f565b60405180910390fd5b611de781612413565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344ae5e458560200151866040015187610100015188606001518961012001518a608001518b60c001518c60e001518c600001518d602001516040518b63ffffffff1660e01b8152600401611e809a99989796959493929190613475565b602060405180830381600087803b158015611e9a57600080fd5b505af1158015611eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed29190612aab565b90506000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166326c5291487846040518363ffffffff1660e01b8152600401611f33929190613344565b602060405180830381600087803b158015611f4d57600080fd5b505af1158015611f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f859190612b10565b905080611fc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbe906135ff565b60405180910390fd5b505050505050565b611fd76121c4565b73ffffffffffffffffffffffffffffffffffffffff16611ff5611501565b73ffffffffffffffffffffffffffffffffffffffff161461207e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612104576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806139316026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000806040516024016040516020818303038152906040527f72172364000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808473ffffffffffffffffffffffffffffffffffffffff168360405161227c919061327c565b600060405180830381855afa9150503d80600081146122b7576040519150601f19603f3d011682016040523d82523d6000602084013e6122bc565b606091505b509150915081612301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f89061351f565b60405180910390fd5b61230a81611869565b9350505050919050565b600060019054906101000a900460ff168061233a575060008054906101000a900460ff16155b61238f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613957602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156123df576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6123e761246d565b6123ef61255c565b80156124105760008060016101000a81548160ff0219169083151502179055505b50565b60008160ff161015801561242b575060648160ff1611155b61246a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124619061359f565b60405180910390fd5b50565b600060019054906101000a900460ff1680612493575060008054906101000a900460ff16155b6124e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613957602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612538576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156125595760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612582575060008054906101000a900460ff16155b6125d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613957602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612627576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006126316121c4565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156126f15760008060016101000a81548160ff0219169083151502179055505b50565b6000612707612702846136d0565b61369f565b90508281526020810184848401111561271f57600080fd5b61272a848285613851565b509392505050565b600061274561274084613700565b61369f565b90508281526020810184848401111561275d57600080fd5b612768848285613851565b509392505050565b600061278361277e84613700565b61369f565b90508281526020810184848401111561279b57600080fd5b6127a6848285613860565b509392505050565b6000813590506127bd816138a6565b92915050565b6000815190506127d2816138a6565b92915050565b6000815190506127e7816138bd565b92915050565b6000813590506127fc816138d4565b92915050565b600081519050612811816138d4565b92915050565b600082601f83011261282857600080fd5b81356128388482602086016126f4565b91505092915050565b600081519050612850816138eb565b92915050565b600082601f83011261286757600080fd5b8135612877848260208601612732565b91505092915050565b600082601f83011261289157600080fd5b81516128a1848260208601612770565b91505092915050565b6000604082840312156128bc57600080fd5b6128c6604061369f565b905060006128d6848285016127c3565b60008301525060206128ea84828501612a6d565b60208301525092915050565b6000610160828403121561290957600080fd5b61291461016061369f565b90506000612924848285016127c3565b600083015250602082015167ffffffffffffffff81111561294457600080fd5b61295084828501612880565b602083015250604082015167ffffffffffffffff81111561297057600080fd5b61297c84828501612880565b604083015250606061299084828501612a43565b60608301525060806129a484828501612a43565b60808301525060a06129b8848285016127c3565b60a08301525060c06129cc848285016127c3565b60c08301525060e06129e084828501612a6d565b60e0830152506101006129f584828501612a6d565b61010083015250610120612a0b84828501612a6d565b61012083015250610140612a21848285016127d8565b6101408301525092915050565b600081359050612a3d81613902565b92915050565b600081519050612a5281613902565b92915050565b600081359050612a6781613919565b92915050565b600081519050612a7c81613919565b92915050565b600060208284031215612a9457600080fd5b6000612aa2848285016127ae565b91505092915050565b600060208284031215612abd57600080fd5b6000612acb848285016127c3565b91505092915050565b60008060408385031215612ae757600080fd5b6000612af5858286016127ae565b9250506020612b06858286016127ae565b9150509250929050565b600060208284031215612b2257600080fd5b6000612b30848285016127d8565b91505092915050565b600060208284031215612b4b57600080fd5b6000612b59848285016127ed565b91505092915050565b600060208284031215612b7457600080fd5b6000612b8284828501612802565b91505092915050565b600080600060608486031215612ba057600080fd5b6000612bae868287016127ed565b9350506020612bbf868287016127ae565b9250506040612bd086828701612a58565b9150509250925092565b600060208284031215612bec57600080fd5b600082013567ffffffffffffffff811115612c0657600080fd5b612c1284828501612817565b91505092915050565b600060208284031215612c2d57600080fd5b6000612c3b84828501612841565b91505092915050565b600080600080600080600080610100898b031215612c6157600080fd5b600089013567ffffffffffffffff811115612c7b57600080fd5b612c878b828c01612856565b985050602089013567ffffffffffffffff811115612ca457600080fd5b612cb08b828c01612856565b9750506040612cc18b828c01612a58565b9650506060612cd28b828c01612a2e565b9550506080612ce38b828c01612a58565b94505060a0612cf48b828c01612a2e565b93505060c0612d058b828c016127ae565b92505060e0612d168b828c01612a58565b9150509295985092959890939650565b600060408284031215612d3857600080fd5b6000612d46848285016128aa565b91505092915050565b600060208284031215612d6157600080fd5b600082015167ffffffffffffffff811115612d7b57600080fd5b612d87848285016128f6565b91505092915050565b612d99816137d3565b82525050565b612da881613762565b82525050565b612db781613774565b82525050565b612dc681613780565b82525050565b6000612dd782613730565b612de18185613746565b9350612df1818560208601613860565b80840191505092915050565b612e06816137e5565b82525050565b612e1581613809565b82525050565b6000612e268261373b565b612e308185613751565b9350612e40818560208601613860565b612e4981613895565b840191505092915050565b6000612e61603583613751565b91507f696e70757420616464726573732068617320746f20626520612076616c69642060008301527f546f6b656e466163746f727920636f6e747261637400000000000000000000006020830152604082019050919050565b6000612ec7602783613751565b91507f6e65772052656769737472792068617320746f206265206f776e65642062792060008301527f4d616e61676572000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612f2d601783613751565b91507f6d616e61676572206e6f7420696e697469616c697a65640000000000000000006000830152602082019050919050565b6000612f6d602b83613751565b91507f6e657720546f6b656e466163746f72792068617320746f206265206f776e656460008301527f206279204d616e616765720000000000000000000000000000000000000000006020830152604082019050919050565b6000612fd3601f83613751565b91507f68617320746f2062652061626f7665203020616e642062656c6f7720313030006000830152602082019050919050565b6000613013602483613751565b91507f4d414e414745523a2062656e65666963696172792063616e206e6f742062652060008301527f7a65726f000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613079602783613751565b91507f68617320746f2062652061626f7665206f7220657175616c203020616e64206260008301527f656c6f77203139000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006130df602883613751565b91507f526567697374727920617070726f76652070726f706f73616c2068617320746f60008301527f20737563636565640000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613145601483613751565b91507f506172616d732063616e2774206265205a45524f0000000000000000000000006000830152602082019050919050565b6000613185602683613751565b91507f546f6b656e466163746f727920646f6573206e6f74206f776e20546f6b656e5660008301527f657374696e6700000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006131eb601f83613751565b91507f546f6b656e56657374696e672068617320746f206265207468652073616d65006000830152602082019050919050565b600061322b601383613751565b91507f496e76616c69642075696e74382076616c7565000000000000000000000000006000830152602082019050919050565b613267816137bc565b82525050565b613276816137c6565b82525050565b60006132888284612dcc565b915081905092915050565b60006020820190506132a86000830184612d9f565b92915050565b60006060820190506132c36000830186612d90565b6132d06020830185612d9f565b6132dd6040830184612d9f565b949350505050565b60006040820190506132fa6000830185612d9f565b6133076020830184612d9f565b9392505050565b60006020820190506133236000830184612dae565b92915050565b600060208201905061333e6000830184612dbd565b92915050565b60006040820190506133596000830185612dbd565b6133666020830184612d9f565b9392505050565b60006060820190506133826000830186612dbd565b61338f6020830185612d9f565b61339c604083018461326d565b949350505050565b60006020820190506133b96000830184612dfd565b92915050565b60006020820190506133d46000830184612e0c565b92915050565b60006101208201905081810360008301526133f5818c612e1b565b90508181036020830152613409818b612e1b565b9050613418604083018a61326d565b613425606083018961325e565b613432608083018861326d565b61343f60a083018761325e565b61344c60c0830186612d9f565b61345960e0830185612d90565b61346761010083018461326d565b9a9950505050505050505050565b6000610140820190508181036000830152613490818d612e1b565b905081810360208301526134a4818c612e1b565b90506134b3604083018b61326d565b6134c0606083018a61325e565b6134cd608083018961326d565b6134da60a083018861325e565b6134e760c0830187612d9f565b6134f460e083018661326d565b613502610100830185612d9f565b61351061012083018461326d565b9b9a5050505050505050505050565b6000602082019050818103600083015261353881612e54565b9050919050565b6000602082019050818103600083015261355881612eba565b9050919050565b6000602082019050818103600083015261357881612f20565b9050919050565b6000602082019050818103600083015261359881612f60565b9050919050565b600060208201905081810360008301526135b881612fc6565b9050919050565b600060208201905081810360008301526135d881613006565b9050919050565b600060208201905081810360008301526135f88161306c565b9050919050565b60006020820190508181036000830152613618816130d2565b9050919050565b6000602082019050818103600083015261363881613138565b9050919050565b6000602082019050818103600083015261365881613178565b9050919050565b60006020820190508181036000830152613678816131de565b9050919050565b600060208201905081810360008301526136988161321e565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156136c6576136c5613893565b5b8060405250919050565b600067ffffffffffffffff8211156136eb576136ea613893565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561371b5761371a613893565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061376d8261379c565b9050919050565b60008115159050919050565b6000819050919050565b600061379582613762565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006137de8261382d565b9050919050565b60006137f0826137f7565b9050919050565b60006138028261379c565b9050919050565b60006138148261381b565b9050919050565b60006138268261379c565b9050919050565b60006138388261383f565b9050919050565b600061384a8261379c565b9050919050565b82818337600083830152505050565b60005b8381101561387e578082015181840152602081019050613863565b8381111561388d576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b6138af81613762565b81146138ba57600080fd5b50565b6138c681613774565b81146138d157600080fd5b50565b6138dd81613780565b81146138e857600080fd5b50565b6138f48161378a565b81146138ff57600080fd5b50565b61390b816137bc565b811461391657600080fd5b50565b613922816137c6565b811461392d57600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a26469706673582212202b8c370bce853f1324ef1b6a3464c34522008224f9ecaf3334e68fd0e9cb6ecf64736f6c63430007060033",
}

// ManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ManagerMetaData.ABI instead.
var ManagerABI = ManagerMetaData.ABI

// ManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ManagerMetaData.Bin instead.
var ManagerBin = ManagerMetaData.Bin

// DeployManager deploys a new Ethereum contract, binding an instance of Manager to it.
func DeployManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Manager, error) {
	parsed, err := ManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Manager{ManagerCaller: ManagerCaller{contract: contract}, ManagerTransactor: ManagerTransactor{contract: contract}, ManagerFilterer: ManagerFilterer{contract: contract}}, nil
}

// Manager is an auto generated Go binding around an Ethereum contract.
type Manager struct {
	ManagerCaller     // Read-only binding to the contract
	ManagerTransactor // Write-only binding to the contract
	ManagerFilterer   // Log filterer for contract events
}

// ManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ManagerSession struct {
	Contract     *Manager          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ManagerCallerSession struct {
	Contract *ManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ManagerTransactorSession struct {
	Contract     *ManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ManagerRaw struct {
	Contract *Manager // Generic contract binding to access the raw methods on
}

// ManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ManagerCallerRaw struct {
	Contract *ManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ManagerTransactorRaw struct {
	Contract *ManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewManager creates a new instance of Manager, bound to a specific deployed contract.
func NewManager(address common.Address, backend bind.ContractBackend) (*Manager, error) {
	contract, err := bindManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Manager{ManagerCaller: ManagerCaller{contract: contract}, ManagerTransactor: ManagerTransactor{contract: contract}, ManagerFilterer: ManagerFilterer{contract: contract}}, nil
}

// NewManagerCaller creates a new read-only instance of Manager, bound to a specific deployed contract.
func NewManagerCaller(address common.Address, caller bind.ContractCaller) (*ManagerCaller, error) {
	contract, err := bindManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ManagerCaller{contract: contract}, nil
}

// NewManagerTransactor creates a new write-only instance of Manager, bound to a specific deployed contract.
func NewManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ManagerTransactor, error) {
	contract, err := bindManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ManagerTransactor{contract: contract}, nil
}

// NewManagerFilterer creates a new log filterer instance of Manager, bound to a specific deployed contract.
func NewManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ManagerFilterer, error) {
	contract, err := bindManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ManagerFilterer{contract: contract}, nil
}

// bindManager binds a generic wrapper to an already deployed contract.
func bindManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Manager *ManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Manager.Contract.ManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Manager *ManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Manager.Contract.ManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Manager *ManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Manager.Contract.ManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Manager *ManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Manager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Manager *ManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Manager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Manager *ManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Manager.Contract.contract.Transact(opts, method, params...)
}

// RegistryInstance is a free data retrieval call binding the contract method 0xb75ceb71.
//
// Solidity: function RegistryInstance() view returns(address)
func (_Manager *ManagerCaller) RegistryInstance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Manager.contract.Call(opts, &out, "RegistryInstance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryInstance is a free data retrieval call binding the contract method 0xb75ceb71.
//
// Solidity: function RegistryInstance() view returns(address)
func (_Manager *ManagerSession) RegistryInstance() (common.Address, error) {
	return _Manager.Contract.RegistryInstance(&_Manager.CallOpts)
}

// RegistryInstance is a free data retrieval call binding the contract method 0xb75ceb71.
//
// Solidity: function RegistryInstance() view returns(address)
func (_Manager *ManagerCallerSession) RegistryInstance() (common.Address, error) {
	return _Manager.Contract.RegistryInstance(&_Manager.CallOpts)
}

// TokenFactoryInstance is a free data retrieval call binding the contract method 0xbbba6e92.
//
// Solidity: function TokenFactoryInstance() view returns(address)
func (_Manager *ManagerCaller) TokenFactoryInstance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Manager.contract.Call(opts, &out, "TokenFactoryInstance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenFactoryInstance is a free data retrieval call binding the contract method 0xbbba6e92.
//
// Solidity: function TokenFactoryInstance() view returns(address)
func (_Manager *ManagerSession) TokenFactoryInstance() (common.Address, error) {
	return _Manager.Contract.TokenFactoryInstance(&_Manager.CallOpts)
}

// TokenFactoryInstance is a free data retrieval call binding the contract method 0xbbba6e92.
//
// Solidity: function TokenFactoryInstance() view returns(address)
func (_Manager *ManagerCallerSession) TokenFactoryInstance() (common.Address, error) {
	return _Manager.Contract.TokenFactoryInstance(&_Manager.CallOpts)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_Manager *ManagerCaller) Initialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Manager.contract.Call(opts, &out, "initialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_Manager *ManagerSession) Initialized() (bool, error) {
	return _Manager.Contract.Initialized(&_Manager.CallOpts)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_Manager *ManagerCallerSession) Initialized() (bool, error) {
	return _Manager.Contract.Initialized(&_Manager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Manager *ManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Manager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Manager *ManagerSession) Owner() (common.Address, error) {
	return _Manager.Contract.Owner(&_Manager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Manager *ManagerCallerSession) Owner() (common.Address, error) {
	return _Manager.Contract.Owner(&_Manager.CallOpts)
}

// ParseAddr is a free data retrieval call binding the contract method 0xb718f83a.
//
// Solidity: function parseAddr(bytes data) pure returns(address parsed)
func (_Manager *ManagerCaller) ParseAddr(opts *bind.CallOpts, data []byte) (common.Address, error) {
	var out []interface{}
	err := _Manager.contract.Call(opts, &out, "parseAddr", data)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParseAddr is a free data retrieval call binding the contract method 0xb718f83a.
//
// Solidity: function parseAddr(bytes data) pure returns(address parsed)
func (_Manager *ManagerSession) ParseAddr(data []byte) (common.Address, error) {
	return _Manager.Contract.ParseAddr(&_Manager.CallOpts, data)
}

// ParseAddr is a free data retrieval call binding the contract method 0xb718f83a.
//
// Solidity: function parseAddr(bytes data) pure returns(address parsed)
func (_Manager *ManagerCallerSession) ParseAddr(data []byte) (common.Address, error) {
	return _Manager.Contract.ParseAddr(&_Manager.CallOpts, data)
}

// ApproveProposal is a paid mutator transaction binding the contract method 0xf20b5b2c.
//
// Solidity: function approveProposal(bytes32 _hashIndex) returns()
func (_Manager *ManagerTransactor) ApproveProposal(opts *bind.TransactOpts, _hashIndex [32]byte) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "approveProposal", _hashIndex)
}

// ApproveProposal is a paid mutator transaction binding the contract method 0xf20b5b2c.
//
// Solidity: function approveProposal(bytes32 _hashIndex) returns()
func (_Manager *ManagerSession) ApproveProposal(_hashIndex [32]byte) (*types.Transaction, error) {
	return _Manager.Contract.ApproveProposal(&_Manager.TransactOpts, _hashIndex)
}

// ApproveProposal is a paid mutator transaction binding the contract method 0xf20b5b2c.
//
// Solidity: function approveProposal(bytes32 _hashIndex) returns()
func (_Manager *ManagerTransactorSession) ApproveProposal(_hashIndex [32]byte) (*types.Transaction, error) {
	return _Manager.Contract.ApproveProposal(&_Manager.TransactOpts, _hashIndex)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _registry, address _tokenFactory) returns()
func (_Manager *ManagerTransactor) Initialize(opts *bind.TransactOpts, _registry common.Address, _tokenFactory common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "initialize", _registry, _tokenFactory)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _registry, address _tokenFactory) returns()
func (_Manager *ManagerSession) Initialize(_registry common.Address, _tokenFactory common.Address) (*types.Transaction, error) {
	return _Manager.Contract.Initialize(&_Manager.TransactOpts, _registry, _tokenFactory)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _registry, address _tokenFactory) returns()
func (_Manager *ManagerTransactorSession) Initialize(_registry common.Address, _tokenFactory common.Address) (*types.Transaction, error) {
	return _Manager.Contract.Initialize(&_Manager.TransactOpts, _registry, _tokenFactory)
}

// MigrateManager is a paid mutator transaction binding the contract method 0xc7a8db19.
//
// Solidity: function migrateManager(address _newManager) returns()
func (_Manager *ManagerTransactor) MigrateManager(opts *bind.TransactOpts, _newManager common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "migrateManager", _newManager)
}

// MigrateManager is a paid mutator transaction binding the contract method 0xc7a8db19.
//
// Solidity: function migrateManager(address _newManager) returns()
func (_Manager *ManagerSession) MigrateManager(_newManager common.Address) (*types.Transaction, error) {
	return _Manager.Contract.MigrateManager(&_Manager.TransactOpts, _newManager)
}

// MigrateManager is a paid mutator transaction binding the contract method 0xc7a8db19.
//
// Solidity: function migrateManager(address _newManager) returns()
func (_Manager *ManagerTransactorSession) MigrateManager(_newManager common.Address) (*types.Transaction, error) {
	return _Manager.Contract.MigrateManager(&_Manager.TransactOpts, _newManager)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Manager *ManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Manager *ManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _Manager.Contract.RenounceOwnership(&_Manager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Manager *ManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Manager.Contract.RenounceOwnership(&_Manager.TransactOpts)
}

// SetPlatformWallet is a paid mutator transaction binding the contract method 0x8831e9cf.
//
// Solidity: function setPlatformWallet(address _newPlatformWallet) returns()
func (_Manager *ManagerTransactor) SetPlatformWallet(opts *bind.TransactOpts, _newPlatformWallet common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "setPlatformWallet", _newPlatformWallet)
}

// SetPlatformWallet is a paid mutator transaction binding the contract method 0x8831e9cf.
//
// Solidity: function setPlatformWallet(address _newPlatformWallet) returns()
func (_Manager *ManagerSession) SetPlatformWallet(_newPlatformWallet common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetPlatformWallet(&_Manager.TransactOpts, _newPlatformWallet)
}

// SetPlatformWallet is a paid mutator transaction binding the contract method 0x8831e9cf.
//
// Solidity: function setPlatformWallet(address _newPlatformWallet) returns()
func (_Manager *ManagerTransactorSession) SetPlatformWallet(_newPlatformWallet common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetPlatformWallet(&_Manager.TransactOpts, _newPlatformWallet)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address _newRegistry) returns()
func (_Manager *ManagerTransactor) SetRegistry(opts *bind.TransactOpts, _newRegistry common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "setRegistry", _newRegistry)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address _newRegistry) returns()
func (_Manager *ManagerSession) SetRegistry(_newRegistry common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetRegistry(&_Manager.TransactOpts, _newRegistry)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address _newRegistry) returns()
func (_Manager *ManagerTransactorSession) SetRegistry(_newRegistry common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetRegistry(&_Manager.TransactOpts, _newRegistry)
}

// SetTokenFactory is a paid mutator transaction binding the contract method 0x2f73a9f8.
//
// Solidity: function setTokenFactory(address _newTokenFactory) returns()
func (_Manager *ManagerTransactor) SetTokenFactory(opts *bind.TransactOpts, _newTokenFactory common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "setTokenFactory", _newTokenFactory)
}

// SetTokenFactory is a paid mutator transaction binding the contract method 0x2f73a9f8.
//
// Solidity: function setTokenFactory(address _newTokenFactory) returns()
func (_Manager *ManagerSession) SetTokenFactory(_newTokenFactory common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetTokenFactory(&_Manager.TransactOpts, _newTokenFactory)
}

// SetTokenFactory is a paid mutator transaction binding the contract method 0x2f73a9f8.
//
// Solidity: function setTokenFactory(address _newTokenFactory) returns()
func (_Manager *ManagerTransactorSession) SetTokenFactory(_newTokenFactory common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetTokenFactory(&_Manager.TransactOpts, _newTokenFactory)
}

// SetTokenVesting is a paid mutator transaction binding the contract method 0x43e34696.
//
// Solidity: function setTokenVesting(address _newTokenVesting) returns()
func (_Manager *ManagerTransactor) SetTokenVesting(opts *bind.TransactOpts, _newTokenVesting common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "setTokenVesting", _newTokenVesting)
}

// SetTokenVesting is a paid mutator transaction binding the contract method 0x43e34696.
//
// Solidity: function setTokenVesting(address _newTokenVesting) returns()
func (_Manager *ManagerSession) SetTokenVesting(_newTokenVesting common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetTokenVesting(&_Manager.TransactOpts, _newTokenVesting)
}

// SetTokenVesting is a paid mutator transaction binding the contract method 0x43e34696.
//
// Solidity: function setTokenVesting(address _newTokenVesting) returns()
func (_Manager *ManagerTransactorSession) SetTokenVesting(_newTokenVesting common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetTokenVesting(&_Manager.TransactOpts, _newTokenVesting)
}

// SetVestingAddress is a paid mutator transaction binding the contract method 0x0876eae5.
//
// Solidity: function setVestingAddress(address _token, address _vestingBeneficiary) returns()
func (_Manager *ManagerTransactor) SetVestingAddress(opts *bind.TransactOpts, _token common.Address, _vestingBeneficiary common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "setVestingAddress", _token, _vestingBeneficiary)
}

// SetVestingAddress is a paid mutator transaction binding the contract method 0x0876eae5.
//
// Solidity: function setVestingAddress(address _token, address _vestingBeneficiary) returns()
func (_Manager *ManagerSession) SetVestingAddress(_token common.Address, _vestingBeneficiary common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetVestingAddress(&_Manager.TransactOpts, _token, _vestingBeneficiary)
}

// SetVestingAddress is a paid mutator transaction binding the contract method 0x0876eae5.
//
// Solidity: function setVestingAddress(address _token, address _vestingBeneficiary) returns()
func (_Manager *ManagerTransactorSession) SetVestingAddress(_token common.Address, _vestingBeneficiary common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetVestingAddress(&_Manager.TransactOpts, _token, _vestingBeneficiary)
}

// SetVestingReferral is a paid mutator transaction binding the contract method 0xa8fc15c6.
//
// Solidity: function setVestingReferral(address _token, address _vestingReferral) returns()
func (_Manager *ManagerTransactor) SetVestingReferral(opts *bind.TransactOpts, _token common.Address, _vestingReferral common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "setVestingReferral", _token, _vestingReferral)
}

// SetVestingReferral is a paid mutator transaction binding the contract method 0xa8fc15c6.
//
// Solidity: function setVestingReferral(address _token, address _vestingReferral) returns()
func (_Manager *ManagerSession) SetVestingReferral(_token common.Address, _vestingReferral common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetVestingReferral(&_Manager.TransactOpts, _token, _vestingReferral)
}

// SetVestingReferral is a paid mutator transaction binding the contract method 0xa8fc15c6.
//
// Solidity: function setVestingReferral(address _token, address _vestingReferral) returns()
func (_Manager *ManagerTransactorSession) SetVestingReferral(_token common.Address, _vestingReferral common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetVestingReferral(&_Manager.TransactOpts, _token, _vestingReferral)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0x6709a651.
//
// Solidity: function submitProposal(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply, uint8 _initialPercentage, uint256 _vestingPeriodInDays, address _vestingBeneficiary, uint8 _initialPlatformPercentage) returns(bytes32 hashIndex)
func (_Manager *ManagerTransactor) SubmitProposal(opts *bind.TransactOpts, _name string, _symbol string, _decimals uint8, _totalSupply *big.Int, _initialPercentage uint8, _vestingPeriodInDays *big.Int, _vestingBeneficiary common.Address, _initialPlatformPercentage uint8) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "submitProposal", _name, _symbol, _decimals, _totalSupply, _initialPercentage, _vestingPeriodInDays, _vestingBeneficiary, _initialPlatformPercentage)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0x6709a651.
//
// Solidity: function submitProposal(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply, uint8 _initialPercentage, uint256 _vestingPeriodInDays, address _vestingBeneficiary, uint8 _initialPlatformPercentage) returns(bytes32 hashIndex)
func (_Manager *ManagerSession) SubmitProposal(_name string, _symbol string, _decimals uint8, _totalSupply *big.Int, _initialPercentage uint8, _vestingPeriodInDays *big.Int, _vestingBeneficiary common.Address, _initialPlatformPercentage uint8) (*types.Transaction, error) {
	return _Manager.Contract.SubmitProposal(&_Manager.TransactOpts, _name, _symbol, _decimals, _totalSupply, _initialPercentage, _vestingPeriodInDays, _vestingBeneficiary, _initialPlatformPercentage)
}

// SubmitProposal is a paid mutator transaction binding the contract method 0x6709a651.
//
// Solidity: function submitProposal(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply, uint8 _initialPercentage, uint256 _vestingPeriodInDays, address _vestingBeneficiary, uint8 _initialPlatformPercentage) returns(bytes32 hashIndex)
func (_Manager *ManagerTransactorSession) SubmitProposal(_name string, _symbol string, _decimals uint8, _totalSupply *big.Int, _initialPercentage uint8, _vestingPeriodInDays *big.Int, _vestingBeneficiary common.Address, _initialPlatformPercentage uint8) (*types.Transaction, error) {
	return _Manager.Contract.SubmitProposal(&_Manager.TransactOpts, _name, _symbol, _decimals, _totalSupply, _initialPercentage, _vestingPeriodInDays, _vestingBeneficiary, _initialPlatformPercentage)
}

// SubmitReferral is a paid mutator transaction binding the contract method 0x1fd49f4b.
//
// Solidity: function submitReferral(bytes32 _hashIndex, address _referral, uint8 _referralPercentage) returns()
func (_Manager *ManagerTransactor) SubmitReferral(opts *bind.TransactOpts, _hashIndex [32]byte, _referral common.Address, _referralPercentage uint8) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "submitReferral", _hashIndex, _referral, _referralPercentage)
}

// SubmitReferral is a paid mutator transaction binding the contract method 0x1fd49f4b.
//
// Solidity: function submitReferral(bytes32 _hashIndex, address _referral, uint8 _referralPercentage) returns()
func (_Manager *ManagerSession) SubmitReferral(_hashIndex [32]byte, _referral common.Address, _referralPercentage uint8) (*types.Transaction, error) {
	return _Manager.Contract.SubmitReferral(&_Manager.TransactOpts, _hashIndex, _referral, _referralPercentage)
}

// SubmitReferral is a paid mutator transaction binding the contract method 0x1fd49f4b.
//
// Solidity: function submitReferral(bytes32 _hashIndex, address _referral, uint8 _referralPercentage) returns()
func (_Manager *ManagerTransactorSession) SubmitReferral(_hashIndex [32]byte, _referral common.Address, _referralPercentage uint8) (*types.Transaction, error) {
	return _Manager.Contract.SubmitReferral(&_Manager.TransactOpts, _hashIndex, _referral, _referralPercentage)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Manager *ManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Manager *ManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Manager.Contract.TransferOwnership(&_Manager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Manager *ManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Manager.Contract.TransferOwnership(&_Manager.TransactOpts, newOwner)
}

// ManagerLogManagerMigratedIterator is returned from FilterLogManagerMigrated and is used to iterate over the raw logs and unpacked data for LogManagerMigrated events raised by the Manager contract.
type ManagerLogManagerMigratedIterator struct {
	Event *ManagerLogManagerMigrated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerLogManagerMigratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerLogManagerMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerLogManagerMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerLogManagerMigratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerLogManagerMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerLogManagerMigrated represents a LogManagerMigrated event raised by the Manager contract.
type ManagerLogManagerMigrated struct {
	NewManager common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogManagerMigrated is a free log retrieval operation binding the contract event 0x829487e3aa7912bd48776fb898d596977df4debceb186d7575e27a94f70be174.
//
// Solidity: event LogManagerMigrated(address indexed newManager)
func (_Manager *ManagerFilterer) FilterLogManagerMigrated(opts *bind.FilterOpts, newManager []common.Address) (*ManagerLogManagerMigratedIterator, error) {

	var newManagerRule []interface{}
	for _, newManagerItem := range newManager {
		newManagerRule = append(newManagerRule, newManagerItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "LogManagerMigrated", newManagerRule)
	if err != nil {
		return nil, err
	}
	return &ManagerLogManagerMigratedIterator{contract: _Manager.contract, event: "LogManagerMigrated", logs: logs, sub: sub}, nil
}

// WatchLogManagerMigrated is a free log subscription operation binding the contract event 0x829487e3aa7912bd48776fb898d596977df4debceb186d7575e27a94f70be174.
//
// Solidity: event LogManagerMigrated(address indexed newManager)
func (_Manager *ManagerFilterer) WatchLogManagerMigrated(opts *bind.WatchOpts, sink chan<- *ManagerLogManagerMigrated, newManager []common.Address) (event.Subscription, error) {

	var newManagerRule []interface{}
	for _, newManagerItem := range newManager {
		newManagerRule = append(newManagerRule, newManagerItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "LogManagerMigrated", newManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerLogManagerMigrated)
				if err := _Manager.contract.UnpackLog(event, "LogManagerMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogManagerMigrated is a log parse operation binding the contract event 0x829487e3aa7912bd48776fb898d596977df4debceb186d7575e27a94f70be174.
//
// Solidity: event LogManagerMigrated(address indexed newManager)
func (_Manager *ManagerFilterer) ParseLogManagerMigrated(log types.Log) (*ManagerLogManagerMigrated, error) {
	event := new(ManagerLogManagerMigrated)
	if err := _Manager.contract.UnpackLog(event, "LogManagerMigrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ManagerLogRegistryChangedIterator is returned from FilterLogRegistryChanged and is used to iterate over the raw logs and unpacked data for LogRegistryChanged events raised by the Manager contract.
type ManagerLogRegistryChangedIterator struct {
	Event *ManagerLogRegistryChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerLogRegistryChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerLogRegistryChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerLogRegistryChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerLogRegistryChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerLogRegistryChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerLogRegistryChanged represents a LogRegistryChanged event raised by the Manager contract.
type ManagerLogRegistryChanged struct {
	OldR common.Address
	NewR common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogRegistryChanged is a free log retrieval operation binding the contract event 0xec10a16af385903532506d1567380fd8d93d880e8ed4bcacc42b0848e781406a.
//
// Solidity: event LogRegistryChanged(address oldR, address newR)
func (_Manager *ManagerFilterer) FilterLogRegistryChanged(opts *bind.FilterOpts) (*ManagerLogRegistryChangedIterator, error) {

	logs, sub, err := _Manager.contract.FilterLogs(opts, "LogRegistryChanged")
	if err != nil {
		return nil, err
	}
	return &ManagerLogRegistryChangedIterator{contract: _Manager.contract, event: "LogRegistryChanged", logs: logs, sub: sub}, nil
}

// WatchLogRegistryChanged is a free log subscription operation binding the contract event 0xec10a16af385903532506d1567380fd8d93d880e8ed4bcacc42b0848e781406a.
//
// Solidity: event LogRegistryChanged(address oldR, address newR)
func (_Manager *ManagerFilterer) WatchLogRegistryChanged(opts *bind.WatchOpts, sink chan<- *ManagerLogRegistryChanged) (event.Subscription, error) {

	logs, sub, err := _Manager.contract.WatchLogs(opts, "LogRegistryChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerLogRegistryChanged)
				if err := _Manager.contract.UnpackLog(event, "LogRegistryChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogRegistryChanged is a log parse operation binding the contract event 0xec10a16af385903532506d1567380fd8d93d880e8ed4bcacc42b0848e781406a.
//
// Solidity: event LogRegistryChanged(address oldR, address newR)
func (_Manager *ManagerFilterer) ParseLogRegistryChanged(log types.Log) (*ManagerLogRegistryChanged, error) {
	event := new(ManagerLogRegistryChanged)
	if err := _Manager.contract.UnpackLog(event, "LogRegistryChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ManagerLogTokenFactoryChangedIterator is returned from FilterLogTokenFactoryChanged and is used to iterate over the raw logs and unpacked data for LogTokenFactoryChanged events raised by the Manager contract.
type ManagerLogTokenFactoryChangedIterator struct {
	Event *ManagerLogTokenFactoryChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerLogTokenFactoryChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerLogTokenFactoryChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerLogTokenFactoryChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerLogTokenFactoryChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerLogTokenFactoryChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerLogTokenFactoryChanged represents a LogTokenFactoryChanged event raised by the Manager contract.
type ManagerLogTokenFactoryChanged struct {
	OldTF common.Address
	NewTF common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogTokenFactoryChanged is a free log retrieval operation binding the contract event 0x4b517b4fb873b53bdb7db1289eb8ec3d2c92288dda09e8e68b3db0efade30b7e.
//
// Solidity: event LogTokenFactoryChanged(address oldTF, address newTF)
func (_Manager *ManagerFilterer) FilterLogTokenFactoryChanged(opts *bind.FilterOpts) (*ManagerLogTokenFactoryChangedIterator, error) {

	logs, sub, err := _Manager.contract.FilterLogs(opts, "LogTokenFactoryChanged")
	if err != nil {
		return nil, err
	}
	return &ManagerLogTokenFactoryChangedIterator{contract: _Manager.contract, event: "LogTokenFactoryChanged", logs: logs, sub: sub}, nil
}

// WatchLogTokenFactoryChanged is a free log subscription operation binding the contract event 0x4b517b4fb873b53bdb7db1289eb8ec3d2c92288dda09e8e68b3db0efade30b7e.
//
// Solidity: event LogTokenFactoryChanged(address oldTF, address newTF)
func (_Manager *ManagerFilterer) WatchLogTokenFactoryChanged(opts *bind.WatchOpts, sink chan<- *ManagerLogTokenFactoryChanged) (event.Subscription, error) {

	logs, sub, err := _Manager.contract.WatchLogs(opts, "LogTokenFactoryChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerLogTokenFactoryChanged)
				if err := _Manager.contract.UnpackLog(event, "LogTokenFactoryChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogTokenFactoryChanged is a log parse operation binding the contract event 0x4b517b4fb873b53bdb7db1289eb8ec3d2c92288dda09e8e68b3db0efade30b7e.
//
// Solidity: event LogTokenFactoryChanged(address oldTF, address newTF)
func (_Manager *ManagerFilterer) ParseLogTokenFactoryChanged(log types.Log) (*ManagerLogTokenFactoryChanged, error) {
	event := new(ManagerLogTokenFactoryChanged)
	if err := _Manager.contract.UnpackLog(event, "LogTokenFactoryChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Manager contract.
type ManagerOwnershipTransferredIterator struct {
	Event *ManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerOwnershipTransferred represents a OwnershipTransferred event raised by the Manager contract.
type ManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Manager *ManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ManagerOwnershipTransferredIterator{contract: _Manager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Manager *ManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerOwnershipTransferred)
				if err := _Manager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Manager *ManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ManagerOwnershipTransferred, error) {
	event := new(ManagerOwnershipTransferred)
	if err := _Manager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
